// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v6.32.1
// source: sys_user.proto

// sys_user 用户

package user

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	SysUserService_SysUserCreate_FullMethodName    = "/user.SysUserService/SysUserCreate"
	SysUserService_SysUserUpdate_FullMethodName    = "/user.SysUserService/SysUserUpdate"
	SysUserService_SysUserDelete_FullMethodName    = "/user.SysUserService/SysUserDelete"
	SysUserService_SysUser_FullMethodName          = "/user.SysUserService/SysUser"
	SysUserService_SysUserRecover_FullMethodName   = "/user.SysUserService/SysUserRecover"
	SysUserService_SysUserDrop_FullMethodName      = "/user.SysUserService/SysUserDrop"
	SysUserService_SysUserLogin_FullMethodName     = "/user.SysUserService/SysUserLogin"
	SysUserService_SysUserList_FullMethodName      = "/user.SysUserService/SysUserList"
	SysUserService_SysUserListTotal_FullMethodName = "/user.SysUserService/SysUserListTotal"
)

// SysUserServiceClient is the client API for SysUserService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// SysUserService 服务
type SysUserServiceClient interface {
	SysUserCreate(ctx context.Context, in *SysUserCreateRequest, opts ...grpc.CallOption) (*SysUserCreateResponse, error)
	SysUserUpdate(ctx context.Context, in *SysUserUpdateRequest, opts ...grpc.CallOption) (*SysUserUpdateResponse, error)
	SysUserDelete(ctx context.Context, in *SysUserDeleteRequest, opts ...grpc.CallOption) (*SysUserDeleteResponse, error)
	SysUser(ctx context.Context, in *SysUserRequest, opts ...grpc.CallOption) (*SysUserResponse, error)
	SysUserRecover(ctx context.Context, in *SysUserRecoverRequest, opts ...grpc.CallOption) (*SysUserRecoverResponse, error)
	SysUserDrop(ctx context.Context, in *SysUserDropRequest, opts ...grpc.CallOption) (*SysUserDropResponse, error)
	SysUserLogin(ctx context.Context, in *SysUserLoginRequest, opts ...grpc.CallOption) (*SysUserLoginResponse, error)
	SysUserList(ctx context.Context, in *SysUserListRequest, opts ...grpc.CallOption) (*SysUserListResponse, error)
	SysUserListTotal(ctx context.Context, in *SysUserListTotalRequest, opts ...grpc.CallOption) (*SysUserTotalResponse, error)
}

type sysUserServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewSysUserServiceClient(cc grpc.ClientConnInterface) SysUserServiceClient {
	return &sysUserServiceClient{cc}
}

func (c *sysUserServiceClient) SysUserCreate(ctx context.Context, in *SysUserCreateRequest, opts ...grpc.CallOption) (*SysUserCreateResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SysUserCreateResponse)
	err := c.cc.Invoke(ctx, SysUserService_SysUserCreate_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sysUserServiceClient) SysUserUpdate(ctx context.Context, in *SysUserUpdateRequest, opts ...grpc.CallOption) (*SysUserUpdateResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SysUserUpdateResponse)
	err := c.cc.Invoke(ctx, SysUserService_SysUserUpdate_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sysUserServiceClient) SysUserDelete(ctx context.Context, in *SysUserDeleteRequest, opts ...grpc.CallOption) (*SysUserDeleteResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SysUserDeleteResponse)
	err := c.cc.Invoke(ctx, SysUserService_SysUserDelete_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sysUserServiceClient) SysUser(ctx context.Context, in *SysUserRequest, opts ...grpc.CallOption) (*SysUserResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SysUserResponse)
	err := c.cc.Invoke(ctx, SysUserService_SysUser_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sysUserServiceClient) SysUserRecover(ctx context.Context, in *SysUserRecoverRequest, opts ...grpc.CallOption) (*SysUserRecoverResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SysUserRecoverResponse)
	err := c.cc.Invoke(ctx, SysUserService_SysUserRecover_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sysUserServiceClient) SysUserDrop(ctx context.Context, in *SysUserDropRequest, opts ...grpc.CallOption) (*SysUserDropResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SysUserDropResponse)
	err := c.cc.Invoke(ctx, SysUserService_SysUserDrop_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sysUserServiceClient) SysUserLogin(ctx context.Context, in *SysUserLoginRequest, opts ...grpc.CallOption) (*SysUserLoginResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SysUserLoginResponse)
	err := c.cc.Invoke(ctx, SysUserService_SysUserLogin_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sysUserServiceClient) SysUserList(ctx context.Context, in *SysUserListRequest, opts ...grpc.CallOption) (*SysUserListResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SysUserListResponse)
	err := c.cc.Invoke(ctx, SysUserService_SysUserList_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sysUserServiceClient) SysUserListTotal(ctx context.Context, in *SysUserListTotalRequest, opts ...grpc.CallOption) (*SysUserTotalResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SysUserTotalResponse)
	err := c.cc.Invoke(ctx, SysUserService_SysUserListTotal_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SysUserServiceServer is the server API for SysUserService service.
// All implementations must embed UnimplementedSysUserServiceServer
// for forward compatibility.
//
// SysUserService 服务
type SysUserServiceServer interface {
	SysUserCreate(context.Context, *SysUserCreateRequest) (*SysUserCreateResponse, error)
	SysUserUpdate(context.Context, *SysUserUpdateRequest) (*SysUserUpdateResponse, error)
	SysUserDelete(context.Context, *SysUserDeleteRequest) (*SysUserDeleteResponse, error)
	SysUser(context.Context, *SysUserRequest) (*SysUserResponse, error)
	SysUserRecover(context.Context, *SysUserRecoverRequest) (*SysUserRecoverResponse, error)
	SysUserDrop(context.Context, *SysUserDropRequest) (*SysUserDropResponse, error)
	SysUserLogin(context.Context, *SysUserLoginRequest) (*SysUserLoginResponse, error)
	SysUserList(context.Context, *SysUserListRequest) (*SysUserListResponse, error)
	SysUserListTotal(context.Context, *SysUserListTotalRequest) (*SysUserTotalResponse, error)
	mustEmbedUnimplementedSysUserServiceServer()
}

// UnimplementedSysUserServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedSysUserServiceServer struct{}

func (UnimplementedSysUserServiceServer) SysUserCreate(context.Context, *SysUserCreateRequest) (*SysUserCreateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SysUserCreate not implemented")
}
func (UnimplementedSysUserServiceServer) SysUserUpdate(context.Context, *SysUserUpdateRequest) (*SysUserUpdateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SysUserUpdate not implemented")
}
func (UnimplementedSysUserServiceServer) SysUserDelete(context.Context, *SysUserDeleteRequest) (*SysUserDeleteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SysUserDelete not implemented")
}
func (UnimplementedSysUserServiceServer) SysUser(context.Context, *SysUserRequest) (*SysUserResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SysUser not implemented")
}
func (UnimplementedSysUserServiceServer) SysUserRecover(context.Context, *SysUserRecoverRequest) (*SysUserRecoverResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SysUserRecover not implemented")
}
func (UnimplementedSysUserServiceServer) SysUserDrop(context.Context, *SysUserDropRequest) (*SysUserDropResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SysUserDrop not implemented")
}
func (UnimplementedSysUserServiceServer) SysUserLogin(context.Context, *SysUserLoginRequest) (*SysUserLoginResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SysUserLogin not implemented")
}
func (UnimplementedSysUserServiceServer) SysUserList(context.Context, *SysUserListRequest) (*SysUserListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SysUserList not implemented")
}
func (UnimplementedSysUserServiceServer) SysUserListTotal(context.Context, *SysUserListTotalRequest) (*SysUserTotalResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SysUserListTotal not implemented")
}
func (UnimplementedSysUserServiceServer) mustEmbedUnimplementedSysUserServiceServer() {}
func (UnimplementedSysUserServiceServer) testEmbeddedByValue()                        {}

// UnsafeSysUserServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SysUserServiceServer will
// result in compilation errors.
type UnsafeSysUserServiceServer interface {
	mustEmbedUnimplementedSysUserServiceServer()
}

func RegisterSysUserServiceServer(s grpc.ServiceRegistrar, srv SysUserServiceServer) {
	// If the following call pancis, it indicates UnimplementedSysUserServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&SysUserService_ServiceDesc, srv)
}

func _SysUserService_SysUserCreate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SysUserCreateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SysUserServiceServer).SysUserCreate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SysUserService_SysUserCreate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SysUserServiceServer).SysUserCreate(ctx, req.(*SysUserCreateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SysUserService_SysUserUpdate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SysUserUpdateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SysUserServiceServer).SysUserUpdate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SysUserService_SysUserUpdate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SysUserServiceServer).SysUserUpdate(ctx, req.(*SysUserUpdateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SysUserService_SysUserDelete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SysUserDeleteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SysUserServiceServer).SysUserDelete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SysUserService_SysUserDelete_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SysUserServiceServer).SysUserDelete(ctx, req.(*SysUserDeleteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SysUserService_SysUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SysUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SysUserServiceServer).SysUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SysUserService_SysUser_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SysUserServiceServer).SysUser(ctx, req.(*SysUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SysUserService_SysUserRecover_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SysUserRecoverRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SysUserServiceServer).SysUserRecover(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SysUserService_SysUserRecover_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SysUserServiceServer).SysUserRecover(ctx, req.(*SysUserRecoverRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SysUserService_SysUserDrop_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SysUserDropRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SysUserServiceServer).SysUserDrop(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SysUserService_SysUserDrop_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SysUserServiceServer).SysUserDrop(ctx, req.(*SysUserDropRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SysUserService_SysUserLogin_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SysUserLoginRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SysUserServiceServer).SysUserLogin(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SysUserService_SysUserLogin_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SysUserServiceServer).SysUserLogin(ctx, req.(*SysUserLoginRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SysUserService_SysUserList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SysUserListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SysUserServiceServer).SysUserList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SysUserService_SysUserList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SysUserServiceServer).SysUserList(ctx, req.(*SysUserListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SysUserService_SysUserListTotal_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SysUserListTotalRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SysUserServiceServer).SysUserListTotal(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SysUserService_SysUserListTotal_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SysUserServiceServer).SysUserListTotal(ctx, req.(*SysUserListTotalRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// SysUserService_ServiceDesc is the grpc.ServiceDesc for SysUserService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var SysUserService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "user.SysUserService",
	HandlerType: (*SysUserServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SysUserCreate",
			Handler:    _SysUserService_SysUserCreate_Handler,
		},
		{
			MethodName: "SysUserUpdate",
			Handler:    _SysUserService_SysUserUpdate_Handler,
		},
		{
			MethodName: "SysUserDelete",
			Handler:    _SysUserService_SysUserDelete_Handler,
		},
		{
			MethodName: "SysUser",
			Handler:    _SysUserService_SysUser_Handler,
		},
		{
			MethodName: "SysUserRecover",
			Handler:    _SysUserService_SysUserRecover_Handler,
		},
		{
			MethodName: "SysUserDrop",
			Handler:    _SysUserService_SysUserDrop_Handler,
		},
		{
			MethodName: "SysUserLogin",
			Handler:    _SysUserService_SysUserLogin_Handler,
		},
		{
			MethodName: "SysUserList",
			Handler:    _SysUserService_SysUserList_Handler,
		},
		{
			MethodName: "SysUserListTotal",
			Handler:    _SysUserService_SysUserListTotal_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "sys_user.proto",
}
