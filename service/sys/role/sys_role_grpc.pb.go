// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v6.32.1
// source: sys_role.proto

// sys_role 角色

package role

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	SysRoleService_SysRoleCreate_FullMethodName    = "/role.SysRoleService/SysRoleCreate"
	SysRoleService_SysRoleUpdate_FullMethodName    = "/role.SysRoleService/SysRoleUpdate"
	SysRoleService_SysRoleDelete_FullMethodName    = "/role.SysRoleService/SysRoleDelete"
	SysRoleService_SysRole_FullMethodName          = "/role.SysRoleService/SysRole"
	SysRoleService_SysRoleRecover_FullMethodName   = "/role.SysRoleService/SysRoleRecover"
	SysRoleService_SysRoleDrop_FullMethodName      = "/role.SysRoleService/SysRoleDrop"
	SysRoleService_SysRoleCode_FullMethodName      = "/role.SysRoleService/SysRoleCode"
	SysRoleService_SysRoleList_FullMethodName      = "/role.SysRoleService/SysRoleList"
	SysRoleService_SysRoleListTotal_FullMethodName = "/role.SysRoleService/SysRoleListTotal"
)

// SysRoleServiceClient is the client API for SysRoleService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// SysRoleService 服务
type SysRoleServiceClient interface {
	SysRoleCreate(ctx context.Context, in *SysRoleCreateRequest, opts ...grpc.CallOption) (*SysRoleCreateResponse, error)
	SysRoleUpdate(ctx context.Context, in *SysRoleUpdateRequest, opts ...grpc.CallOption) (*SysRoleUpdateResponse, error)
	SysRoleDelete(ctx context.Context, in *SysRoleDeleteRequest, opts ...grpc.CallOption) (*SysRoleDeleteResponse, error)
	SysRole(ctx context.Context, in *SysRoleRequest, opts ...grpc.CallOption) (*SysRoleResponse, error)
	SysRoleRecover(ctx context.Context, in *SysRoleRecoverRequest, opts ...grpc.CallOption) (*SysRoleRecoverResponse, error)
	SysRoleDrop(ctx context.Context, in *SysRoleDropRequest, opts ...grpc.CallOption) (*SysRoleDropResponse, error)
	SysRoleCode(ctx context.Context, in *SysRoleCodeRequest, opts ...grpc.CallOption) (*SysRoleCodeResponse, error)
	SysRoleList(ctx context.Context, in *SysRoleListRequest, opts ...grpc.CallOption) (*SysRoleListResponse, error)
	SysRoleListTotal(ctx context.Context, in *SysRoleListTotalRequest, opts ...grpc.CallOption) (*SysRoleTotalResponse, error)
}

type sysRoleServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewSysRoleServiceClient(cc grpc.ClientConnInterface) SysRoleServiceClient {
	return &sysRoleServiceClient{cc}
}

func (c *sysRoleServiceClient) SysRoleCreate(ctx context.Context, in *SysRoleCreateRequest, opts ...grpc.CallOption) (*SysRoleCreateResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SysRoleCreateResponse)
	err := c.cc.Invoke(ctx, SysRoleService_SysRoleCreate_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sysRoleServiceClient) SysRoleUpdate(ctx context.Context, in *SysRoleUpdateRequest, opts ...grpc.CallOption) (*SysRoleUpdateResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SysRoleUpdateResponse)
	err := c.cc.Invoke(ctx, SysRoleService_SysRoleUpdate_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sysRoleServiceClient) SysRoleDelete(ctx context.Context, in *SysRoleDeleteRequest, opts ...grpc.CallOption) (*SysRoleDeleteResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SysRoleDeleteResponse)
	err := c.cc.Invoke(ctx, SysRoleService_SysRoleDelete_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sysRoleServiceClient) SysRole(ctx context.Context, in *SysRoleRequest, opts ...grpc.CallOption) (*SysRoleResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SysRoleResponse)
	err := c.cc.Invoke(ctx, SysRoleService_SysRole_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sysRoleServiceClient) SysRoleRecover(ctx context.Context, in *SysRoleRecoverRequest, opts ...grpc.CallOption) (*SysRoleRecoverResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SysRoleRecoverResponse)
	err := c.cc.Invoke(ctx, SysRoleService_SysRoleRecover_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sysRoleServiceClient) SysRoleDrop(ctx context.Context, in *SysRoleDropRequest, opts ...grpc.CallOption) (*SysRoleDropResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SysRoleDropResponse)
	err := c.cc.Invoke(ctx, SysRoleService_SysRoleDrop_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sysRoleServiceClient) SysRoleCode(ctx context.Context, in *SysRoleCodeRequest, opts ...grpc.CallOption) (*SysRoleCodeResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SysRoleCodeResponse)
	err := c.cc.Invoke(ctx, SysRoleService_SysRoleCode_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sysRoleServiceClient) SysRoleList(ctx context.Context, in *SysRoleListRequest, opts ...grpc.CallOption) (*SysRoleListResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SysRoleListResponse)
	err := c.cc.Invoke(ctx, SysRoleService_SysRoleList_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sysRoleServiceClient) SysRoleListTotal(ctx context.Context, in *SysRoleListTotalRequest, opts ...grpc.CallOption) (*SysRoleTotalResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SysRoleTotalResponse)
	err := c.cc.Invoke(ctx, SysRoleService_SysRoleListTotal_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SysRoleServiceServer is the server API for SysRoleService service.
// All implementations must embed UnimplementedSysRoleServiceServer
// for forward compatibility.
//
// SysRoleService 服务
type SysRoleServiceServer interface {
	SysRoleCreate(context.Context, *SysRoleCreateRequest) (*SysRoleCreateResponse, error)
	SysRoleUpdate(context.Context, *SysRoleUpdateRequest) (*SysRoleUpdateResponse, error)
	SysRoleDelete(context.Context, *SysRoleDeleteRequest) (*SysRoleDeleteResponse, error)
	SysRole(context.Context, *SysRoleRequest) (*SysRoleResponse, error)
	SysRoleRecover(context.Context, *SysRoleRecoverRequest) (*SysRoleRecoverResponse, error)
	SysRoleDrop(context.Context, *SysRoleDropRequest) (*SysRoleDropResponse, error)
	SysRoleCode(context.Context, *SysRoleCodeRequest) (*SysRoleCodeResponse, error)
	SysRoleList(context.Context, *SysRoleListRequest) (*SysRoleListResponse, error)
	SysRoleListTotal(context.Context, *SysRoleListTotalRequest) (*SysRoleTotalResponse, error)
	mustEmbedUnimplementedSysRoleServiceServer()
}

// UnimplementedSysRoleServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedSysRoleServiceServer struct{}

func (UnimplementedSysRoleServiceServer) SysRoleCreate(context.Context, *SysRoleCreateRequest) (*SysRoleCreateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SysRoleCreate not implemented")
}
func (UnimplementedSysRoleServiceServer) SysRoleUpdate(context.Context, *SysRoleUpdateRequest) (*SysRoleUpdateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SysRoleUpdate not implemented")
}
func (UnimplementedSysRoleServiceServer) SysRoleDelete(context.Context, *SysRoleDeleteRequest) (*SysRoleDeleteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SysRoleDelete not implemented")
}
func (UnimplementedSysRoleServiceServer) SysRole(context.Context, *SysRoleRequest) (*SysRoleResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SysRole not implemented")
}
func (UnimplementedSysRoleServiceServer) SysRoleRecover(context.Context, *SysRoleRecoverRequest) (*SysRoleRecoverResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SysRoleRecover not implemented")
}
func (UnimplementedSysRoleServiceServer) SysRoleDrop(context.Context, *SysRoleDropRequest) (*SysRoleDropResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SysRoleDrop not implemented")
}
func (UnimplementedSysRoleServiceServer) SysRoleCode(context.Context, *SysRoleCodeRequest) (*SysRoleCodeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SysRoleCode not implemented")
}
func (UnimplementedSysRoleServiceServer) SysRoleList(context.Context, *SysRoleListRequest) (*SysRoleListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SysRoleList not implemented")
}
func (UnimplementedSysRoleServiceServer) SysRoleListTotal(context.Context, *SysRoleListTotalRequest) (*SysRoleTotalResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SysRoleListTotal not implemented")
}
func (UnimplementedSysRoleServiceServer) mustEmbedUnimplementedSysRoleServiceServer() {}
func (UnimplementedSysRoleServiceServer) testEmbeddedByValue()                        {}

// UnsafeSysRoleServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SysRoleServiceServer will
// result in compilation errors.
type UnsafeSysRoleServiceServer interface {
	mustEmbedUnimplementedSysRoleServiceServer()
}

func RegisterSysRoleServiceServer(s grpc.ServiceRegistrar, srv SysRoleServiceServer) {
	// If the following call pancis, it indicates UnimplementedSysRoleServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&SysRoleService_ServiceDesc, srv)
}

func _SysRoleService_SysRoleCreate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SysRoleCreateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SysRoleServiceServer).SysRoleCreate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SysRoleService_SysRoleCreate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SysRoleServiceServer).SysRoleCreate(ctx, req.(*SysRoleCreateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SysRoleService_SysRoleUpdate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SysRoleUpdateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SysRoleServiceServer).SysRoleUpdate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SysRoleService_SysRoleUpdate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SysRoleServiceServer).SysRoleUpdate(ctx, req.(*SysRoleUpdateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SysRoleService_SysRoleDelete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SysRoleDeleteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SysRoleServiceServer).SysRoleDelete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SysRoleService_SysRoleDelete_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SysRoleServiceServer).SysRoleDelete(ctx, req.(*SysRoleDeleteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SysRoleService_SysRole_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SysRoleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SysRoleServiceServer).SysRole(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SysRoleService_SysRole_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SysRoleServiceServer).SysRole(ctx, req.(*SysRoleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SysRoleService_SysRoleRecover_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SysRoleRecoverRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SysRoleServiceServer).SysRoleRecover(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SysRoleService_SysRoleRecover_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SysRoleServiceServer).SysRoleRecover(ctx, req.(*SysRoleRecoverRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SysRoleService_SysRoleDrop_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SysRoleDropRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SysRoleServiceServer).SysRoleDrop(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SysRoleService_SysRoleDrop_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SysRoleServiceServer).SysRoleDrop(ctx, req.(*SysRoleDropRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SysRoleService_SysRoleCode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SysRoleCodeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SysRoleServiceServer).SysRoleCode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SysRoleService_SysRoleCode_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SysRoleServiceServer).SysRoleCode(ctx, req.(*SysRoleCodeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SysRoleService_SysRoleList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SysRoleListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SysRoleServiceServer).SysRoleList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SysRoleService_SysRoleList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SysRoleServiceServer).SysRoleList(ctx, req.(*SysRoleListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SysRoleService_SysRoleListTotal_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SysRoleListTotalRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SysRoleServiceServer).SysRoleListTotal(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SysRoleService_SysRoleListTotal_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SysRoleServiceServer).SysRoleListTotal(ctx, req.(*SysRoleListTotalRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// SysRoleService_ServiceDesc is the grpc.ServiceDesc for SysRoleService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var SysRoleService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "role.SysRoleService",
	HandlerType: (*SysRoleServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SysRoleCreate",
			Handler:    _SysRoleService_SysRoleCreate_Handler,
		},
		{
			MethodName: "SysRoleUpdate",
			Handler:    _SysRoleService_SysRoleUpdate_Handler,
		},
		{
			MethodName: "SysRoleDelete",
			Handler:    _SysRoleService_SysRoleDelete_Handler,
		},
		{
			MethodName: "SysRole",
			Handler:    _SysRoleService_SysRole_Handler,
		},
		{
			MethodName: "SysRoleRecover",
			Handler:    _SysRoleService_SysRoleRecover_Handler,
		},
		{
			MethodName: "SysRoleDrop",
			Handler:    _SysRoleService_SysRoleDrop_Handler,
		},
		{
			MethodName: "SysRoleCode",
			Handler:    _SysRoleService_SysRoleCode_Handler,
		},
		{
			MethodName: "SysRoleList",
			Handler:    _SysRoleService_SysRoleList_Handler,
		},
		{
			MethodName: "SysRoleListTotal",
			Handler:    _SysRoleService_SysRoleListTotal_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "sys_role.proto",
}
