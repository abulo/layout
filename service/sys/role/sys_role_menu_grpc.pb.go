// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v6.32.1
// source: sys_role_menu.proto

// sys_role_menu 角色菜单

package role

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	SysRoleMenuService_SysRoleMenuCreate_FullMethodName    = "/role.SysRoleMenuService/SysRoleMenuCreate"
	SysRoleMenuService_SysRoleMenuUpdate_FullMethodName    = "/role.SysRoleMenuService/SysRoleMenuUpdate"
	SysRoleMenuService_SysRoleMenuDelete_FullMethodName    = "/role.SysRoleMenuService/SysRoleMenuDelete"
	SysRoleMenuService_SysRoleMenu_FullMethodName          = "/role.SysRoleMenuService/SysRoleMenu"
	SysRoleMenuService_SysRoleMenuItem_FullMethodName      = "/role.SysRoleMenuService/SysRoleMenuItem"
	SysRoleMenuService_SysRoleMenuList_FullMethodName      = "/role.SysRoleMenuService/SysRoleMenuList"
	SysRoleMenuService_SysRoleMenuListTotal_FullMethodName = "/role.SysRoleMenuService/SysRoleMenuListTotal"
)

// SysRoleMenuServiceClient is the client API for SysRoleMenuService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// SysRoleMenuService 服务
type SysRoleMenuServiceClient interface {
	SysRoleMenuCreate(ctx context.Context, in *SysRoleMenuCreateRequest, opts ...grpc.CallOption) (*SysRoleMenuCreateResponse, error)
	SysRoleMenuUpdate(ctx context.Context, in *SysRoleMenuUpdateRequest, opts ...grpc.CallOption) (*SysRoleMenuUpdateResponse, error)
	SysRoleMenuDelete(ctx context.Context, in *SysRoleMenuDeleteRequest, opts ...grpc.CallOption) (*SysRoleMenuDeleteResponse, error)
	SysRoleMenu(ctx context.Context, in *SysRoleMenuRequest, opts ...grpc.CallOption) (*SysRoleMenuResponse, error)
	SysRoleMenuItem(ctx context.Context, in *SysRoleMenuItemRequest, opts ...grpc.CallOption) (*SysRoleMenuItemResponse, error)
	SysRoleMenuList(ctx context.Context, in *SysRoleMenuListRequest, opts ...grpc.CallOption) (*SysRoleMenuListResponse, error)
	SysRoleMenuListTotal(ctx context.Context, in *SysRoleMenuListTotalRequest, opts ...grpc.CallOption) (*SysRoleMenuTotalResponse, error)
}

type sysRoleMenuServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewSysRoleMenuServiceClient(cc grpc.ClientConnInterface) SysRoleMenuServiceClient {
	return &sysRoleMenuServiceClient{cc}
}

func (c *sysRoleMenuServiceClient) SysRoleMenuCreate(ctx context.Context, in *SysRoleMenuCreateRequest, opts ...grpc.CallOption) (*SysRoleMenuCreateResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SysRoleMenuCreateResponse)
	err := c.cc.Invoke(ctx, SysRoleMenuService_SysRoleMenuCreate_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sysRoleMenuServiceClient) SysRoleMenuUpdate(ctx context.Context, in *SysRoleMenuUpdateRequest, opts ...grpc.CallOption) (*SysRoleMenuUpdateResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SysRoleMenuUpdateResponse)
	err := c.cc.Invoke(ctx, SysRoleMenuService_SysRoleMenuUpdate_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sysRoleMenuServiceClient) SysRoleMenuDelete(ctx context.Context, in *SysRoleMenuDeleteRequest, opts ...grpc.CallOption) (*SysRoleMenuDeleteResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SysRoleMenuDeleteResponse)
	err := c.cc.Invoke(ctx, SysRoleMenuService_SysRoleMenuDelete_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sysRoleMenuServiceClient) SysRoleMenu(ctx context.Context, in *SysRoleMenuRequest, opts ...grpc.CallOption) (*SysRoleMenuResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SysRoleMenuResponse)
	err := c.cc.Invoke(ctx, SysRoleMenuService_SysRoleMenu_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sysRoleMenuServiceClient) SysRoleMenuItem(ctx context.Context, in *SysRoleMenuItemRequest, opts ...grpc.CallOption) (*SysRoleMenuItemResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SysRoleMenuItemResponse)
	err := c.cc.Invoke(ctx, SysRoleMenuService_SysRoleMenuItem_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sysRoleMenuServiceClient) SysRoleMenuList(ctx context.Context, in *SysRoleMenuListRequest, opts ...grpc.CallOption) (*SysRoleMenuListResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SysRoleMenuListResponse)
	err := c.cc.Invoke(ctx, SysRoleMenuService_SysRoleMenuList_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sysRoleMenuServiceClient) SysRoleMenuListTotal(ctx context.Context, in *SysRoleMenuListTotalRequest, opts ...grpc.CallOption) (*SysRoleMenuTotalResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SysRoleMenuTotalResponse)
	err := c.cc.Invoke(ctx, SysRoleMenuService_SysRoleMenuListTotal_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SysRoleMenuServiceServer is the server API for SysRoleMenuService service.
// All implementations must embed UnimplementedSysRoleMenuServiceServer
// for forward compatibility.
//
// SysRoleMenuService 服务
type SysRoleMenuServiceServer interface {
	SysRoleMenuCreate(context.Context, *SysRoleMenuCreateRequest) (*SysRoleMenuCreateResponse, error)
	SysRoleMenuUpdate(context.Context, *SysRoleMenuUpdateRequest) (*SysRoleMenuUpdateResponse, error)
	SysRoleMenuDelete(context.Context, *SysRoleMenuDeleteRequest) (*SysRoleMenuDeleteResponse, error)
	SysRoleMenu(context.Context, *SysRoleMenuRequest) (*SysRoleMenuResponse, error)
	SysRoleMenuItem(context.Context, *SysRoleMenuItemRequest) (*SysRoleMenuItemResponse, error)
	SysRoleMenuList(context.Context, *SysRoleMenuListRequest) (*SysRoleMenuListResponse, error)
	SysRoleMenuListTotal(context.Context, *SysRoleMenuListTotalRequest) (*SysRoleMenuTotalResponse, error)
	mustEmbedUnimplementedSysRoleMenuServiceServer()
}

// UnimplementedSysRoleMenuServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedSysRoleMenuServiceServer struct{}

func (UnimplementedSysRoleMenuServiceServer) SysRoleMenuCreate(context.Context, *SysRoleMenuCreateRequest) (*SysRoleMenuCreateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SysRoleMenuCreate not implemented")
}
func (UnimplementedSysRoleMenuServiceServer) SysRoleMenuUpdate(context.Context, *SysRoleMenuUpdateRequest) (*SysRoleMenuUpdateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SysRoleMenuUpdate not implemented")
}
func (UnimplementedSysRoleMenuServiceServer) SysRoleMenuDelete(context.Context, *SysRoleMenuDeleteRequest) (*SysRoleMenuDeleteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SysRoleMenuDelete not implemented")
}
func (UnimplementedSysRoleMenuServiceServer) SysRoleMenu(context.Context, *SysRoleMenuRequest) (*SysRoleMenuResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SysRoleMenu not implemented")
}
func (UnimplementedSysRoleMenuServiceServer) SysRoleMenuItem(context.Context, *SysRoleMenuItemRequest) (*SysRoleMenuItemResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SysRoleMenuItem not implemented")
}
func (UnimplementedSysRoleMenuServiceServer) SysRoleMenuList(context.Context, *SysRoleMenuListRequest) (*SysRoleMenuListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SysRoleMenuList not implemented")
}
func (UnimplementedSysRoleMenuServiceServer) SysRoleMenuListTotal(context.Context, *SysRoleMenuListTotalRequest) (*SysRoleMenuTotalResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SysRoleMenuListTotal not implemented")
}
func (UnimplementedSysRoleMenuServiceServer) mustEmbedUnimplementedSysRoleMenuServiceServer() {}
func (UnimplementedSysRoleMenuServiceServer) testEmbeddedByValue()                            {}

// UnsafeSysRoleMenuServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SysRoleMenuServiceServer will
// result in compilation errors.
type UnsafeSysRoleMenuServiceServer interface {
	mustEmbedUnimplementedSysRoleMenuServiceServer()
}

func RegisterSysRoleMenuServiceServer(s grpc.ServiceRegistrar, srv SysRoleMenuServiceServer) {
	// If the following call pancis, it indicates UnimplementedSysRoleMenuServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&SysRoleMenuService_ServiceDesc, srv)
}

func _SysRoleMenuService_SysRoleMenuCreate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SysRoleMenuCreateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SysRoleMenuServiceServer).SysRoleMenuCreate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SysRoleMenuService_SysRoleMenuCreate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SysRoleMenuServiceServer).SysRoleMenuCreate(ctx, req.(*SysRoleMenuCreateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SysRoleMenuService_SysRoleMenuUpdate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SysRoleMenuUpdateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SysRoleMenuServiceServer).SysRoleMenuUpdate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SysRoleMenuService_SysRoleMenuUpdate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SysRoleMenuServiceServer).SysRoleMenuUpdate(ctx, req.(*SysRoleMenuUpdateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SysRoleMenuService_SysRoleMenuDelete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SysRoleMenuDeleteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SysRoleMenuServiceServer).SysRoleMenuDelete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SysRoleMenuService_SysRoleMenuDelete_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SysRoleMenuServiceServer).SysRoleMenuDelete(ctx, req.(*SysRoleMenuDeleteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SysRoleMenuService_SysRoleMenu_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SysRoleMenuRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SysRoleMenuServiceServer).SysRoleMenu(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SysRoleMenuService_SysRoleMenu_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SysRoleMenuServiceServer).SysRoleMenu(ctx, req.(*SysRoleMenuRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SysRoleMenuService_SysRoleMenuItem_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SysRoleMenuItemRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SysRoleMenuServiceServer).SysRoleMenuItem(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SysRoleMenuService_SysRoleMenuItem_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SysRoleMenuServiceServer).SysRoleMenuItem(ctx, req.(*SysRoleMenuItemRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SysRoleMenuService_SysRoleMenuList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SysRoleMenuListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SysRoleMenuServiceServer).SysRoleMenuList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SysRoleMenuService_SysRoleMenuList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SysRoleMenuServiceServer).SysRoleMenuList(ctx, req.(*SysRoleMenuListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SysRoleMenuService_SysRoleMenuListTotal_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SysRoleMenuListTotalRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SysRoleMenuServiceServer).SysRoleMenuListTotal(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SysRoleMenuService_SysRoleMenuListTotal_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SysRoleMenuServiceServer).SysRoleMenuListTotal(ctx, req.(*SysRoleMenuListTotalRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// SysRoleMenuService_ServiceDesc is the grpc.ServiceDesc for SysRoleMenuService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var SysRoleMenuService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "role.SysRoleMenuService",
	HandlerType: (*SysRoleMenuServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SysRoleMenuCreate",
			Handler:    _SysRoleMenuService_SysRoleMenuCreate_Handler,
		},
		{
			MethodName: "SysRoleMenuUpdate",
			Handler:    _SysRoleMenuService_SysRoleMenuUpdate_Handler,
		},
		{
			MethodName: "SysRoleMenuDelete",
			Handler:    _SysRoleMenuService_SysRoleMenuDelete_Handler,
		},
		{
			MethodName: "SysRoleMenu",
			Handler:    _SysRoleMenuService_SysRoleMenu_Handler,
		},
		{
			MethodName: "SysRoleMenuItem",
			Handler:    _SysRoleMenuService_SysRoleMenuItem_Handler,
		},
		{
			MethodName: "SysRoleMenuList",
			Handler:    _SysRoleMenuService_SysRoleMenuList_Handler,
		},
		{
			MethodName: "SysRoleMenuListTotal",
			Handler:    _SysRoleMenuService_SysRoleMenuListTotal_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "sys_role_menu.proto",
}
