// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v6.33.0
// source: sys_post.proto

// sys_post 职位

package post

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	SysPostService_SysPostCreate_FullMethodName    = "/post.SysPostService/SysPostCreate"
	SysPostService_SysPostUpdate_FullMethodName    = "/post.SysPostService/SysPostUpdate"
	SysPostService_SysPostDelete_FullMethodName    = "/post.SysPostService/SysPostDelete"
	SysPostService_SysPost_FullMethodName          = "/post.SysPostService/SysPost"
	SysPostService_SysPostRecover_FullMethodName   = "/post.SysPostService/SysPostRecover"
	SysPostService_SysPostDrop_FullMethodName      = "/post.SysPostService/SysPostDrop"
	SysPostService_SysPostList_FullMethodName      = "/post.SysPostService/SysPostList"
	SysPostService_SysPostListTotal_FullMethodName = "/post.SysPostService/SysPostListTotal"
)

// SysPostServiceClient is the client API for SysPostService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// SysPostService 服务
type SysPostServiceClient interface {
	SysPostCreate(ctx context.Context, in *SysPostCreateRequest, opts ...grpc.CallOption) (*SysPostCreateResponse, error)
	SysPostUpdate(ctx context.Context, in *SysPostUpdateRequest, opts ...grpc.CallOption) (*SysPostUpdateResponse, error)
	SysPostDelete(ctx context.Context, in *SysPostDeleteRequest, opts ...grpc.CallOption) (*SysPostDeleteResponse, error)
	SysPost(ctx context.Context, in *SysPostRequest, opts ...grpc.CallOption) (*SysPostResponse, error)
	SysPostRecover(ctx context.Context, in *SysPostRecoverRequest, opts ...grpc.CallOption) (*SysPostRecoverResponse, error)
	SysPostDrop(ctx context.Context, in *SysPostDropRequest, opts ...grpc.CallOption) (*SysPostDropResponse, error)
	SysPostList(ctx context.Context, in *SysPostListRequest, opts ...grpc.CallOption) (*SysPostListResponse, error)
	SysPostListTotal(ctx context.Context, in *SysPostListTotalRequest, opts ...grpc.CallOption) (*SysPostTotalResponse, error)
}

type sysPostServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewSysPostServiceClient(cc grpc.ClientConnInterface) SysPostServiceClient {
	return &sysPostServiceClient{cc}
}

func (c *sysPostServiceClient) SysPostCreate(ctx context.Context, in *SysPostCreateRequest, opts ...grpc.CallOption) (*SysPostCreateResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SysPostCreateResponse)
	err := c.cc.Invoke(ctx, SysPostService_SysPostCreate_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sysPostServiceClient) SysPostUpdate(ctx context.Context, in *SysPostUpdateRequest, opts ...grpc.CallOption) (*SysPostUpdateResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SysPostUpdateResponse)
	err := c.cc.Invoke(ctx, SysPostService_SysPostUpdate_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sysPostServiceClient) SysPostDelete(ctx context.Context, in *SysPostDeleteRequest, opts ...grpc.CallOption) (*SysPostDeleteResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SysPostDeleteResponse)
	err := c.cc.Invoke(ctx, SysPostService_SysPostDelete_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sysPostServiceClient) SysPost(ctx context.Context, in *SysPostRequest, opts ...grpc.CallOption) (*SysPostResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SysPostResponse)
	err := c.cc.Invoke(ctx, SysPostService_SysPost_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sysPostServiceClient) SysPostRecover(ctx context.Context, in *SysPostRecoverRequest, opts ...grpc.CallOption) (*SysPostRecoverResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SysPostRecoverResponse)
	err := c.cc.Invoke(ctx, SysPostService_SysPostRecover_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sysPostServiceClient) SysPostDrop(ctx context.Context, in *SysPostDropRequest, opts ...grpc.CallOption) (*SysPostDropResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SysPostDropResponse)
	err := c.cc.Invoke(ctx, SysPostService_SysPostDrop_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sysPostServiceClient) SysPostList(ctx context.Context, in *SysPostListRequest, opts ...grpc.CallOption) (*SysPostListResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SysPostListResponse)
	err := c.cc.Invoke(ctx, SysPostService_SysPostList_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sysPostServiceClient) SysPostListTotal(ctx context.Context, in *SysPostListTotalRequest, opts ...grpc.CallOption) (*SysPostTotalResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SysPostTotalResponse)
	err := c.cc.Invoke(ctx, SysPostService_SysPostListTotal_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SysPostServiceServer is the server API for SysPostService service.
// All implementations must embed UnimplementedSysPostServiceServer
// for forward compatibility.
//
// SysPostService 服务
type SysPostServiceServer interface {
	SysPostCreate(context.Context, *SysPostCreateRequest) (*SysPostCreateResponse, error)
	SysPostUpdate(context.Context, *SysPostUpdateRequest) (*SysPostUpdateResponse, error)
	SysPostDelete(context.Context, *SysPostDeleteRequest) (*SysPostDeleteResponse, error)
	SysPost(context.Context, *SysPostRequest) (*SysPostResponse, error)
	SysPostRecover(context.Context, *SysPostRecoverRequest) (*SysPostRecoverResponse, error)
	SysPostDrop(context.Context, *SysPostDropRequest) (*SysPostDropResponse, error)
	SysPostList(context.Context, *SysPostListRequest) (*SysPostListResponse, error)
	SysPostListTotal(context.Context, *SysPostListTotalRequest) (*SysPostTotalResponse, error)
	mustEmbedUnimplementedSysPostServiceServer()
}

// UnimplementedSysPostServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedSysPostServiceServer struct{}

func (UnimplementedSysPostServiceServer) SysPostCreate(context.Context, *SysPostCreateRequest) (*SysPostCreateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SysPostCreate not implemented")
}
func (UnimplementedSysPostServiceServer) SysPostUpdate(context.Context, *SysPostUpdateRequest) (*SysPostUpdateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SysPostUpdate not implemented")
}
func (UnimplementedSysPostServiceServer) SysPostDelete(context.Context, *SysPostDeleteRequest) (*SysPostDeleteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SysPostDelete not implemented")
}
func (UnimplementedSysPostServiceServer) SysPost(context.Context, *SysPostRequest) (*SysPostResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SysPost not implemented")
}
func (UnimplementedSysPostServiceServer) SysPostRecover(context.Context, *SysPostRecoverRequest) (*SysPostRecoverResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SysPostRecover not implemented")
}
func (UnimplementedSysPostServiceServer) SysPostDrop(context.Context, *SysPostDropRequest) (*SysPostDropResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SysPostDrop not implemented")
}
func (UnimplementedSysPostServiceServer) SysPostList(context.Context, *SysPostListRequest) (*SysPostListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SysPostList not implemented")
}
func (UnimplementedSysPostServiceServer) SysPostListTotal(context.Context, *SysPostListTotalRequest) (*SysPostTotalResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SysPostListTotal not implemented")
}
func (UnimplementedSysPostServiceServer) mustEmbedUnimplementedSysPostServiceServer() {}
func (UnimplementedSysPostServiceServer) testEmbeddedByValue()                        {}

// UnsafeSysPostServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SysPostServiceServer will
// result in compilation errors.
type UnsafeSysPostServiceServer interface {
	mustEmbedUnimplementedSysPostServiceServer()
}

func RegisterSysPostServiceServer(s grpc.ServiceRegistrar, srv SysPostServiceServer) {
	// If the following call pancis, it indicates UnimplementedSysPostServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&SysPostService_ServiceDesc, srv)
}

func _SysPostService_SysPostCreate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SysPostCreateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SysPostServiceServer).SysPostCreate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SysPostService_SysPostCreate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SysPostServiceServer).SysPostCreate(ctx, req.(*SysPostCreateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SysPostService_SysPostUpdate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SysPostUpdateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SysPostServiceServer).SysPostUpdate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SysPostService_SysPostUpdate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SysPostServiceServer).SysPostUpdate(ctx, req.(*SysPostUpdateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SysPostService_SysPostDelete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SysPostDeleteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SysPostServiceServer).SysPostDelete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SysPostService_SysPostDelete_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SysPostServiceServer).SysPostDelete(ctx, req.(*SysPostDeleteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SysPostService_SysPost_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SysPostRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SysPostServiceServer).SysPost(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SysPostService_SysPost_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SysPostServiceServer).SysPost(ctx, req.(*SysPostRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SysPostService_SysPostRecover_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SysPostRecoverRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SysPostServiceServer).SysPostRecover(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SysPostService_SysPostRecover_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SysPostServiceServer).SysPostRecover(ctx, req.(*SysPostRecoverRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SysPostService_SysPostDrop_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SysPostDropRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SysPostServiceServer).SysPostDrop(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SysPostService_SysPostDrop_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SysPostServiceServer).SysPostDrop(ctx, req.(*SysPostDropRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SysPostService_SysPostList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SysPostListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SysPostServiceServer).SysPostList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SysPostService_SysPostList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SysPostServiceServer).SysPostList(ctx, req.(*SysPostListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SysPostService_SysPostListTotal_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SysPostListTotalRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SysPostServiceServer).SysPostListTotal(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SysPostService_SysPostListTotal_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SysPostServiceServer).SysPostListTotal(ctx, req.(*SysPostListTotalRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// SysPostService_ServiceDesc is the grpc.ServiceDesc for SysPostService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var SysPostService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "post.SysPostService",
	HandlerType: (*SysPostServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SysPostCreate",
			Handler:    _SysPostService_SysPostCreate_Handler,
		},
		{
			MethodName: "SysPostUpdate",
			Handler:    _SysPostService_SysPostUpdate_Handler,
		},
		{
			MethodName: "SysPostDelete",
			Handler:    _SysPostService_SysPostDelete_Handler,
		},
		{
			MethodName: "SysPost",
			Handler:    _SysPostService_SysPost_Handler,
		},
		{
			MethodName: "SysPostRecover",
			Handler:    _SysPostService_SysPostRecover_Handler,
		},
		{
			MethodName: "SysPostDrop",
			Handler:    _SysPostService_SysPostDrop_Handler,
		},
		{
			MethodName: "SysPostList",
			Handler:    _SysPostService_SysPostList_Handler,
		},
		{
			MethodName: "SysPostListTotal",
			Handler:    _SysPostService_SysPostListTotal_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "sys_post.proto",
}
