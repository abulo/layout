// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v6.33.0
// source: sys_user_tenant.proto

// sys_user_tenant 租户用户

package user

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	SysUserTenantService_SysUserTenantCreate_FullMethodName    = "/user.SysUserTenantService/SysUserTenantCreate"
	SysUserTenantService_SysUserTenantUpdate_FullMethodName    = "/user.SysUserTenantService/SysUserTenantUpdate"
	SysUserTenantService_SysUserTenantDelete_FullMethodName    = "/user.SysUserTenantService/SysUserTenantDelete"
	SysUserTenantService_SysUserTenant_FullMethodName          = "/user.SysUserTenantService/SysUserTenant"
	SysUserTenantService_SysUserTenantBind_FullMethodName      = "/user.SysUserTenantService/SysUserTenantBind"
	SysUserTenantService_SysUserTenantList_FullMethodName      = "/user.SysUserTenantService/SysUserTenantList"
	SysUserTenantService_SysUserTenantListTotal_FullMethodName = "/user.SysUserTenantService/SysUserTenantListTotal"
)

// SysUserTenantServiceClient is the client API for SysUserTenantService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// SysUserTenantService 服务
type SysUserTenantServiceClient interface {
	SysUserTenantCreate(ctx context.Context, in *SysUserTenantCreateRequest, opts ...grpc.CallOption) (*SysUserTenantCreateResponse, error)
	SysUserTenantUpdate(ctx context.Context, in *SysUserTenantUpdateRequest, opts ...grpc.CallOption) (*SysUserTenantUpdateResponse, error)
	SysUserTenantDelete(ctx context.Context, in *SysUserTenantDeleteRequest, opts ...grpc.CallOption) (*SysUserTenantDeleteResponse, error)
	SysUserTenant(ctx context.Context, in *SysUserTenantRequest, opts ...grpc.CallOption) (*SysUserTenantResponse, error)
	SysUserTenantBind(ctx context.Context, in *SysUserTenantBindRequest, opts ...grpc.CallOption) (*SysUserTenantBindResponse, error)
	SysUserTenantList(ctx context.Context, in *SysUserTenantListRequest, opts ...grpc.CallOption) (*SysUserTenantListResponse, error)
	SysUserTenantListTotal(ctx context.Context, in *SysUserTenantListTotalRequest, opts ...grpc.CallOption) (*SysUserTenantTotalResponse, error)
}

type sysUserTenantServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewSysUserTenantServiceClient(cc grpc.ClientConnInterface) SysUserTenantServiceClient {
	return &sysUserTenantServiceClient{cc}
}

func (c *sysUserTenantServiceClient) SysUserTenantCreate(ctx context.Context, in *SysUserTenantCreateRequest, opts ...grpc.CallOption) (*SysUserTenantCreateResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SysUserTenantCreateResponse)
	err := c.cc.Invoke(ctx, SysUserTenantService_SysUserTenantCreate_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sysUserTenantServiceClient) SysUserTenantUpdate(ctx context.Context, in *SysUserTenantUpdateRequest, opts ...grpc.CallOption) (*SysUserTenantUpdateResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SysUserTenantUpdateResponse)
	err := c.cc.Invoke(ctx, SysUserTenantService_SysUserTenantUpdate_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sysUserTenantServiceClient) SysUserTenantDelete(ctx context.Context, in *SysUserTenantDeleteRequest, opts ...grpc.CallOption) (*SysUserTenantDeleteResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SysUserTenantDeleteResponse)
	err := c.cc.Invoke(ctx, SysUserTenantService_SysUserTenantDelete_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sysUserTenantServiceClient) SysUserTenant(ctx context.Context, in *SysUserTenantRequest, opts ...grpc.CallOption) (*SysUserTenantResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SysUserTenantResponse)
	err := c.cc.Invoke(ctx, SysUserTenantService_SysUserTenant_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sysUserTenantServiceClient) SysUserTenantBind(ctx context.Context, in *SysUserTenantBindRequest, opts ...grpc.CallOption) (*SysUserTenantBindResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SysUserTenantBindResponse)
	err := c.cc.Invoke(ctx, SysUserTenantService_SysUserTenantBind_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sysUserTenantServiceClient) SysUserTenantList(ctx context.Context, in *SysUserTenantListRequest, opts ...grpc.CallOption) (*SysUserTenantListResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SysUserTenantListResponse)
	err := c.cc.Invoke(ctx, SysUserTenantService_SysUserTenantList_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sysUserTenantServiceClient) SysUserTenantListTotal(ctx context.Context, in *SysUserTenantListTotalRequest, opts ...grpc.CallOption) (*SysUserTenantTotalResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SysUserTenantTotalResponse)
	err := c.cc.Invoke(ctx, SysUserTenantService_SysUserTenantListTotal_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SysUserTenantServiceServer is the server API for SysUserTenantService service.
// All implementations must embed UnimplementedSysUserTenantServiceServer
// for forward compatibility.
//
// SysUserTenantService 服务
type SysUserTenantServiceServer interface {
	SysUserTenantCreate(context.Context, *SysUserTenantCreateRequest) (*SysUserTenantCreateResponse, error)
	SysUserTenantUpdate(context.Context, *SysUserTenantUpdateRequest) (*SysUserTenantUpdateResponse, error)
	SysUserTenantDelete(context.Context, *SysUserTenantDeleteRequest) (*SysUserTenantDeleteResponse, error)
	SysUserTenant(context.Context, *SysUserTenantRequest) (*SysUserTenantResponse, error)
	SysUserTenantBind(context.Context, *SysUserTenantBindRequest) (*SysUserTenantBindResponse, error)
	SysUserTenantList(context.Context, *SysUserTenantListRequest) (*SysUserTenantListResponse, error)
	SysUserTenantListTotal(context.Context, *SysUserTenantListTotalRequest) (*SysUserTenantTotalResponse, error)
	mustEmbedUnimplementedSysUserTenantServiceServer()
}

// UnimplementedSysUserTenantServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedSysUserTenantServiceServer struct{}

func (UnimplementedSysUserTenantServiceServer) SysUserTenantCreate(context.Context, *SysUserTenantCreateRequest) (*SysUserTenantCreateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SysUserTenantCreate not implemented")
}
func (UnimplementedSysUserTenantServiceServer) SysUserTenantUpdate(context.Context, *SysUserTenantUpdateRequest) (*SysUserTenantUpdateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SysUserTenantUpdate not implemented")
}
func (UnimplementedSysUserTenantServiceServer) SysUserTenantDelete(context.Context, *SysUserTenantDeleteRequest) (*SysUserTenantDeleteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SysUserTenantDelete not implemented")
}
func (UnimplementedSysUserTenantServiceServer) SysUserTenant(context.Context, *SysUserTenantRequest) (*SysUserTenantResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SysUserTenant not implemented")
}
func (UnimplementedSysUserTenantServiceServer) SysUserTenantBind(context.Context, *SysUserTenantBindRequest) (*SysUserTenantBindResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SysUserTenantBind not implemented")
}
func (UnimplementedSysUserTenantServiceServer) SysUserTenantList(context.Context, *SysUserTenantListRequest) (*SysUserTenantListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SysUserTenantList not implemented")
}
func (UnimplementedSysUserTenantServiceServer) SysUserTenantListTotal(context.Context, *SysUserTenantListTotalRequest) (*SysUserTenantTotalResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SysUserTenantListTotal not implemented")
}
func (UnimplementedSysUserTenantServiceServer) mustEmbedUnimplementedSysUserTenantServiceServer() {}
func (UnimplementedSysUserTenantServiceServer) testEmbeddedByValue()                              {}

// UnsafeSysUserTenantServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SysUserTenantServiceServer will
// result in compilation errors.
type UnsafeSysUserTenantServiceServer interface {
	mustEmbedUnimplementedSysUserTenantServiceServer()
}

func RegisterSysUserTenantServiceServer(s grpc.ServiceRegistrar, srv SysUserTenantServiceServer) {
	// If the following call pancis, it indicates UnimplementedSysUserTenantServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&SysUserTenantService_ServiceDesc, srv)
}

func _SysUserTenantService_SysUserTenantCreate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SysUserTenantCreateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SysUserTenantServiceServer).SysUserTenantCreate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SysUserTenantService_SysUserTenantCreate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SysUserTenantServiceServer).SysUserTenantCreate(ctx, req.(*SysUserTenantCreateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SysUserTenantService_SysUserTenantUpdate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SysUserTenantUpdateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SysUserTenantServiceServer).SysUserTenantUpdate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SysUserTenantService_SysUserTenantUpdate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SysUserTenantServiceServer).SysUserTenantUpdate(ctx, req.(*SysUserTenantUpdateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SysUserTenantService_SysUserTenantDelete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SysUserTenantDeleteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SysUserTenantServiceServer).SysUserTenantDelete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SysUserTenantService_SysUserTenantDelete_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SysUserTenantServiceServer).SysUserTenantDelete(ctx, req.(*SysUserTenantDeleteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SysUserTenantService_SysUserTenant_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SysUserTenantRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SysUserTenantServiceServer).SysUserTenant(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SysUserTenantService_SysUserTenant_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SysUserTenantServiceServer).SysUserTenant(ctx, req.(*SysUserTenantRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SysUserTenantService_SysUserTenantBind_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SysUserTenantBindRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SysUserTenantServiceServer).SysUserTenantBind(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SysUserTenantService_SysUserTenantBind_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SysUserTenantServiceServer).SysUserTenantBind(ctx, req.(*SysUserTenantBindRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SysUserTenantService_SysUserTenantList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SysUserTenantListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SysUserTenantServiceServer).SysUserTenantList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SysUserTenantService_SysUserTenantList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SysUserTenantServiceServer).SysUserTenantList(ctx, req.(*SysUserTenantListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SysUserTenantService_SysUserTenantListTotal_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SysUserTenantListTotalRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SysUserTenantServiceServer).SysUserTenantListTotal(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SysUserTenantService_SysUserTenantListTotal_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SysUserTenantServiceServer).SysUserTenantListTotal(ctx, req.(*SysUserTenantListTotalRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// SysUserTenantService_ServiceDesc is the grpc.ServiceDesc for SysUserTenantService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var SysUserTenantService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "user.SysUserTenantService",
	HandlerType: (*SysUserTenantServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SysUserTenantCreate",
			Handler:    _SysUserTenantService_SysUserTenantCreate_Handler,
		},
		{
			MethodName: "SysUserTenantUpdate",
			Handler:    _SysUserTenantService_SysUserTenantUpdate_Handler,
		},
		{
			MethodName: "SysUserTenantDelete",
			Handler:    _SysUserTenantService_SysUserTenantDelete_Handler,
		},
		{
			MethodName: "SysUserTenant",
			Handler:    _SysUserTenantService_SysUserTenant_Handler,
		},
		{
			MethodName: "SysUserTenantBind",
			Handler:    _SysUserTenantService_SysUserTenantBind_Handler,
		},
		{
			MethodName: "SysUserTenantList",
			Handler:    _SysUserTenantService_SysUserTenantList_Handler,
		},
		{
			MethodName: "SysUserTenantListTotal",
			Handler:    _SysUserTenantService_SysUserTenantListTotal_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "sys_user_tenant.proto",
}
