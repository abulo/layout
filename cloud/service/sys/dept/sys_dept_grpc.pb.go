// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v6.32.1
// source: sys_dept.proto

// sys_dept 部门

package dept

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	SysDeptService_SysDeptCreate_FullMethodName    = "/dept.SysDeptService/SysDeptCreate"
	SysDeptService_SysDeptUpdate_FullMethodName    = "/dept.SysDeptService/SysDeptUpdate"
	SysDeptService_SysDeptDelete_FullMethodName    = "/dept.SysDeptService/SysDeptDelete"
	SysDeptService_SysDept_FullMethodName          = "/dept.SysDeptService/SysDept"
	SysDeptService_SysDeptRecover_FullMethodName   = "/dept.SysDeptService/SysDeptRecover"
	SysDeptService_SysDeptDrop_FullMethodName      = "/dept.SysDeptService/SysDeptDrop"
	SysDeptService_SysDeptList_FullMethodName      = "/dept.SysDeptService/SysDeptList"
	SysDeptService_SysDeptListTotal_FullMethodName = "/dept.SysDeptService/SysDeptListTotal"
)

// SysDeptServiceClient is the client API for SysDeptService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// SysDeptService 服务
type SysDeptServiceClient interface {
	SysDeptCreate(ctx context.Context, in *SysDeptCreateRequest, opts ...grpc.CallOption) (*SysDeptCreateResponse, error)
	SysDeptUpdate(ctx context.Context, in *SysDeptUpdateRequest, opts ...grpc.CallOption) (*SysDeptUpdateResponse, error)
	SysDeptDelete(ctx context.Context, in *SysDeptDeleteRequest, opts ...grpc.CallOption) (*SysDeptDeleteResponse, error)
	SysDept(ctx context.Context, in *SysDeptRequest, opts ...grpc.CallOption) (*SysDeptResponse, error)
	SysDeptRecover(ctx context.Context, in *SysDeptRecoverRequest, opts ...grpc.CallOption) (*SysDeptRecoverResponse, error)
	SysDeptDrop(ctx context.Context, in *SysDeptDropRequest, opts ...grpc.CallOption) (*SysDeptDropResponse, error)
	SysDeptList(ctx context.Context, in *SysDeptListRequest, opts ...grpc.CallOption) (*SysDeptListResponse, error)
	SysDeptListTotal(ctx context.Context, in *SysDeptListTotalRequest, opts ...grpc.CallOption) (*SysDeptTotalResponse, error)
}

type sysDeptServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewSysDeptServiceClient(cc grpc.ClientConnInterface) SysDeptServiceClient {
	return &sysDeptServiceClient{cc}
}

func (c *sysDeptServiceClient) SysDeptCreate(ctx context.Context, in *SysDeptCreateRequest, opts ...grpc.CallOption) (*SysDeptCreateResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SysDeptCreateResponse)
	err := c.cc.Invoke(ctx, SysDeptService_SysDeptCreate_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sysDeptServiceClient) SysDeptUpdate(ctx context.Context, in *SysDeptUpdateRequest, opts ...grpc.CallOption) (*SysDeptUpdateResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SysDeptUpdateResponse)
	err := c.cc.Invoke(ctx, SysDeptService_SysDeptUpdate_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sysDeptServiceClient) SysDeptDelete(ctx context.Context, in *SysDeptDeleteRequest, opts ...grpc.CallOption) (*SysDeptDeleteResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SysDeptDeleteResponse)
	err := c.cc.Invoke(ctx, SysDeptService_SysDeptDelete_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sysDeptServiceClient) SysDept(ctx context.Context, in *SysDeptRequest, opts ...grpc.CallOption) (*SysDeptResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SysDeptResponse)
	err := c.cc.Invoke(ctx, SysDeptService_SysDept_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sysDeptServiceClient) SysDeptRecover(ctx context.Context, in *SysDeptRecoverRequest, opts ...grpc.CallOption) (*SysDeptRecoverResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SysDeptRecoverResponse)
	err := c.cc.Invoke(ctx, SysDeptService_SysDeptRecover_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sysDeptServiceClient) SysDeptDrop(ctx context.Context, in *SysDeptDropRequest, opts ...grpc.CallOption) (*SysDeptDropResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SysDeptDropResponse)
	err := c.cc.Invoke(ctx, SysDeptService_SysDeptDrop_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sysDeptServiceClient) SysDeptList(ctx context.Context, in *SysDeptListRequest, opts ...grpc.CallOption) (*SysDeptListResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SysDeptListResponse)
	err := c.cc.Invoke(ctx, SysDeptService_SysDeptList_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sysDeptServiceClient) SysDeptListTotal(ctx context.Context, in *SysDeptListTotalRequest, opts ...grpc.CallOption) (*SysDeptTotalResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SysDeptTotalResponse)
	err := c.cc.Invoke(ctx, SysDeptService_SysDeptListTotal_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SysDeptServiceServer is the server API for SysDeptService service.
// All implementations must embed UnimplementedSysDeptServiceServer
// for forward compatibility.
//
// SysDeptService 服务
type SysDeptServiceServer interface {
	SysDeptCreate(context.Context, *SysDeptCreateRequest) (*SysDeptCreateResponse, error)
	SysDeptUpdate(context.Context, *SysDeptUpdateRequest) (*SysDeptUpdateResponse, error)
	SysDeptDelete(context.Context, *SysDeptDeleteRequest) (*SysDeptDeleteResponse, error)
	SysDept(context.Context, *SysDeptRequest) (*SysDeptResponse, error)
	SysDeptRecover(context.Context, *SysDeptRecoverRequest) (*SysDeptRecoverResponse, error)
	SysDeptDrop(context.Context, *SysDeptDropRequest) (*SysDeptDropResponse, error)
	SysDeptList(context.Context, *SysDeptListRequest) (*SysDeptListResponse, error)
	SysDeptListTotal(context.Context, *SysDeptListTotalRequest) (*SysDeptTotalResponse, error)
	mustEmbedUnimplementedSysDeptServiceServer()
}

// UnimplementedSysDeptServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedSysDeptServiceServer struct{}

func (UnimplementedSysDeptServiceServer) SysDeptCreate(context.Context, *SysDeptCreateRequest) (*SysDeptCreateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SysDeptCreate not implemented")
}
func (UnimplementedSysDeptServiceServer) SysDeptUpdate(context.Context, *SysDeptUpdateRequest) (*SysDeptUpdateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SysDeptUpdate not implemented")
}
func (UnimplementedSysDeptServiceServer) SysDeptDelete(context.Context, *SysDeptDeleteRequest) (*SysDeptDeleteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SysDeptDelete not implemented")
}
func (UnimplementedSysDeptServiceServer) SysDept(context.Context, *SysDeptRequest) (*SysDeptResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SysDept not implemented")
}
func (UnimplementedSysDeptServiceServer) SysDeptRecover(context.Context, *SysDeptRecoverRequest) (*SysDeptRecoverResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SysDeptRecover not implemented")
}
func (UnimplementedSysDeptServiceServer) SysDeptDrop(context.Context, *SysDeptDropRequest) (*SysDeptDropResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SysDeptDrop not implemented")
}
func (UnimplementedSysDeptServiceServer) SysDeptList(context.Context, *SysDeptListRequest) (*SysDeptListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SysDeptList not implemented")
}
func (UnimplementedSysDeptServiceServer) SysDeptListTotal(context.Context, *SysDeptListTotalRequest) (*SysDeptTotalResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SysDeptListTotal not implemented")
}
func (UnimplementedSysDeptServiceServer) mustEmbedUnimplementedSysDeptServiceServer() {}
func (UnimplementedSysDeptServiceServer) testEmbeddedByValue()                        {}

// UnsafeSysDeptServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SysDeptServiceServer will
// result in compilation errors.
type UnsafeSysDeptServiceServer interface {
	mustEmbedUnimplementedSysDeptServiceServer()
}

func RegisterSysDeptServiceServer(s grpc.ServiceRegistrar, srv SysDeptServiceServer) {
	// If the following call pancis, it indicates UnimplementedSysDeptServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&SysDeptService_ServiceDesc, srv)
}

func _SysDeptService_SysDeptCreate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SysDeptCreateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SysDeptServiceServer).SysDeptCreate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SysDeptService_SysDeptCreate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SysDeptServiceServer).SysDeptCreate(ctx, req.(*SysDeptCreateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SysDeptService_SysDeptUpdate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SysDeptUpdateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SysDeptServiceServer).SysDeptUpdate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SysDeptService_SysDeptUpdate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SysDeptServiceServer).SysDeptUpdate(ctx, req.(*SysDeptUpdateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SysDeptService_SysDeptDelete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SysDeptDeleteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SysDeptServiceServer).SysDeptDelete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SysDeptService_SysDeptDelete_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SysDeptServiceServer).SysDeptDelete(ctx, req.(*SysDeptDeleteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SysDeptService_SysDept_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SysDeptRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SysDeptServiceServer).SysDept(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SysDeptService_SysDept_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SysDeptServiceServer).SysDept(ctx, req.(*SysDeptRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SysDeptService_SysDeptRecover_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SysDeptRecoverRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SysDeptServiceServer).SysDeptRecover(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SysDeptService_SysDeptRecover_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SysDeptServiceServer).SysDeptRecover(ctx, req.(*SysDeptRecoverRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SysDeptService_SysDeptDrop_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SysDeptDropRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SysDeptServiceServer).SysDeptDrop(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SysDeptService_SysDeptDrop_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SysDeptServiceServer).SysDeptDrop(ctx, req.(*SysDeptDropRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SysDeptService_SysDeptList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SysDeptListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SysDeptServiceServer).SysDeptList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SysDeptService_SysDeptList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SysDeptServiceServer).SysDeptList(ctx, req.(*SysDeptListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SysDeptService_SysDeptListTotal_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SysDeptListTotalRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SysDeptServiceServer).SysDeptListTotal(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SysDeptService_SysDeptListTotal_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SysDeptServiceServer).SysDeptListTotal(ctx, req.(*SysDeptListTotalRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// SysDeptService_ServiceDesc is the grpc.ServiceDesc for SysDeptService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var SysDeptService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "dept.SysDeptService",
	HandlerType: (*SysDeptServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SysDeptCreate",
			Handler:    _SysDeptService_SysDeptCreate_Handler,
		},
		{
			MethodName: "SysDeptUpdate",
			Handler:    _SysDeptService_SysDeptUpdate_Handler,
		},
		{
			MethodName: "SysDeptDelete",
			Handler:    _SysDeptService_SysDeptDelete_Handler,
		},
		{
			MethodName: "SysDept",
			Handler:    _SysDeptService_SysDept_Handler,
		},
		{
			MethodName: "SysDeptRecover",
			Handler:    _SysDeptService_SysDeptRecover_Handler,
		},
		{
			MethodName: "SysDeptDrop",
			Handler:    _SysDeptService_SysDeptDrop_Handler,
		},
		{
			MethodName: "SysDeptList",
			Handler:    _SysDeptService_SysDeptList_Handler,
		},
		{
			MethodName: "SysDeptListTotal",
			Handler:    _SysDeptService_SysDeptListTotal_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "sys_dept.proto",
}
