// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v6.33.0
// source: sys_menu.proto

// sys_menu 菜单

package menu

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	SysMenuService_SysMenuCreate_FullMethodName      = "/menu.SysMenuService/SysMenuCreate"
	SysMenuService_SysMenuUpdate_FullMethodName      = "/menu.SysMenuService/SysMenuUpdate"
	SysMenuService_SysMenuDelete_FullMethodName      = "/menu.SysMenuService/SysMenuDelete"
	SysMenuService_SysMenu_FullMethodName            = "/menu.SysMenuService/SysMenu"
	SysMenuService_SysMenuParent_FullMethodName      = "/menu.SysMenuService/SysMenuParent"
	SysMenuService_SysMenuParentTotal_FullMethodName = "/menu.SysMenuService/SysMenuParentTotal"
	SysMenuService_SysMenuList_FullMethodName        = "/menu.SysMenuService/SysMenuList"
	SysMenuService_SysMenuListTotal_FullMethodName   = "/menu.SysMenuService/SysMenuListTotal"
)

// SysMenuServiceClient is the client API for SysMenuService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// SysMenuService 服务
type SysMenuServiceClient interface {
	SysMenuCreate(ctx context.Context, in *SysMenuCreateRequest, opts ...grpc.CallOption) (*SysMenuCreateResponse, error)
	SysMenuUpdate(ctx context.Context, in *SysMenuUpdateRequest, opts ...grpc.CallOption) (*SysMenuUpdateResponse, error)
	SysMenuDelete(ctx context.Context, in *SysMenuDeleteRequest, opts ...grpc.CallOption) (*SysMenuDeleteResponse, error)
	SysMenu(ctx context.Context, in *SysMenuRequest, opts ...grpc.CallOption) (*SysMenuResponse, error)
	SysMenuParent(ctx context.Context, in *SysMenuParentRequest, opts ...grpc.CallOption) (*SysMenuParentResponse, error)
	SysMenuParentTotal(ctx context.Context, in *SysMenuParentTotalRequest, opts ...grpc.CallOption) (*SysMenuTotalResponse, error)
	SysMenuList(ctx context.Context, in *SysMenuListRequest, opts ...grpc.CallOption) (*SysMenuListResponse, error)
	SysMenuListTotal(ctx context.Context, in *SysMenuListTotalRequest, opts ...grpc.CallOption) (*SysMenuTotalResponse, error)
}

type sysMenuServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewSysMenuServiceClient(cc grpc.ClientConnInterface) SysMenuServiceClient {
	return &sysMenuServiceClient{cc}
}

func (c *sysMenuServiceClient) SysMenuCreate(ctx context.Context, in *SysMenuCreateRequest, opts ...grpc.CallOption) (*SysMenuCreateResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SysMenuCreateResponse)
	err := c.cc.Invoke(ctx, SysMenuService_SysMenuCreate_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sysMenuServiceClient) SysMenuUpdate(ctx context.Context, in *SysMenuUpdateRequest, opts ...grpc.CallOption) (*SysMenuUpdateResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SysMenuUpdateResponse)
	err := c.cc.Invoke(ctx, SysMenuService_SysMenuUpdate_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sysMenuServiceClient) SysMenuDelete(ctx context.Context, in *SysMenuDeleteRequest, opts ...grpc.CallOption) (*SysMenuDeleteResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SysMenuDeleteResponse)
	err := c.cc.Invoke(ctx, SysMenuService_SysMenuDelete_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sysMenuServiceClient) SysMenu(ctx context.Context, in *SysMenuRequest, opts ...grpc.CallOption) (*SysMenuResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SysMenuResponse)
	err := c.cc.Invoke(ctx, SysMenuService_SysMenu_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sysMenuServiceClient) SysMenuParent(ctx context.Context, in *SysMenuParentRequest, opts ...grpc.CallOption) (*SysMenuParentResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SysMenuParentResponse)
	err := c.cc.Invoke(ctx, SysMenuService_SysMenuParent_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sysMenuServiceClient) SysMenuParentTotal(ctx context.Context, in *SysMenuParentTotalRequest, opts ...grpc.CallOption) (*SysMenuTotalResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SysMenuTotalResponse)
	err := c.cc.Invoke(ctx, SysMenuService_SysMenuParentTotal_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sysMenuServiceClient) SysMenuList(ctx context.Context, in *SysMenuListRequest, opts ...grpc.CallOption) (*SysMenuListResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SysMenuListResponse)
	err := c.cc.Invoke(ctx, SysMenuService_SysMenuList_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sysMenuServiceClient) SysMenuListTotal(ctx context.Context, in *SysMenuListTotalRequest, opts ...grpc.CallOption) (*SysMenuTotalResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SysMenuTotalResponse)
	err := c.cc.Invoke(ctx, SysMenuService_SysMenuListTotal_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SysMenuServiceServer is the server API for SysMenuService service.
// All implementations must embed UnimplementedSysMenuServiceServer
// for forward compatibility.
//
// SysMenuService 服务
type SysMenuServiceServer interface {
	SysMenuCreate(context.Context, *SysMenuCreateRequest) (*SysMenuCreateResponse, error)
	SysMenuUpdate(context.Context, *SysMenuUpdateRequest) (*SysMenuUpdateResponse, error)
	SysMenuDelete(context.Context, *SysMenuDeleteRequest) (*SysMenuDeleteResponse, error)
	SysMenu(context.Context, *SysMenuRequest) (*SysMenuResponse, error)
	SysMenuParent(context.Context, *SysMenuParentRequest) (*SysMenuParentResponse, error)
	SysMenuParentTotal(context.Context, *SysMenuParentTotalRequest) (*SysMenuTotalResponse, error)
	SysMenuList(context.Context, *SysMenuListRequest) (*SysMenuListResponse, error)
	SysMenuListTotal(context.Context, *SysMenuListTotalRequest) (*SysMenuTotalResponse, error)
	mustEmbedUnimplementedSysMenuServiceServer()
}

// UnimplementedSysMenuServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedSysMenuServiceServer struct{}

func (UnimplementedSysMenuServiceServer) SysMenuCreate(context.Context, *SysMenuCreateRequest) (*SysMenuCreateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SysMenuCreate not implemented")
}
func (UnimplementedSysMenuServiceServer) SysMenuUpdate(context.Context, *SysMenuUpdateRequest) (*SysMenuUpdateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SysMenuUpdate not implemented")
}
func (UnimplementedSysMenuServiceServer) SysMenuDelete(context.Context, *SysMenuDeleteRequest) (*SysMenuDeleteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SysMenuDelete not implemented")
}
func (UnimplementedSysMenuServiceServer) SysMenu(context.Context, *SysMenuRequest) (*SysMenuResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SysMenu not implemented")
}
func (UnimplementedSysMenuServiceServer) SysMenuParent(context.Context, *SysMenuParentRequest) (*SysMenuParentResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SysMenuParent not implemented")
}
func (UnimplementedSysMenuServiceServer) SysMenuParentTotal(context.Context, *SysMenuParentTotalRequest) (*SysMenuTotalResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SysMenuParentTotal not implemented")
}
func (UnimplementedSysMenuServiceServer) SysMenuList(context.Context, *SysMenuListRequest) (*SysMenuListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SysMenuList not implemented")
}
func (UnimplementedSysMenuServiceServer) SysMenuListTotal(context.Context, *SysMenuListTotalRequest) (*SysMenuTotalResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SysMenuListTotal not implemented")
}
func (UnimplementedSysMenuServiceServer) mustEmbedUnimplementedSysMenuServiceServer() {}
func (UnimplementedSysMenuServiceServer) testEmbeddedByValue()                        {}

// UnsafeSysMenuServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SysMenuServiceServer will
// result in compilation errors.
type UnsafeSysMenuServiceServer interface {
	mustEmbedUnimplementedSysMenuServiceServer()
}

func RegisterSysMenuServiceServer(s grpc.ServiceRegistrar, srv SysMenuServiceServer) {
	// If the following call pancis, it indicates UnimplementedSysMenuServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&SysMenuService_ServiceDesc, srv)
}

func _SysMenuService_SysMenuCreate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SysMenuCreateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SysMenuServiceServer).SysMenuCreate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SysMenuService_SysMenuCreate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SysMenuServiceServer).SysMenuCreate(ctx, req.(*SysMenuCreateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SysMenuService_SysMenuUpdate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SysMenuUpdateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SysMenuServiceServer).SysMenuUpdate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SysMenuService_SysMenuUpdate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SysMenuServiceServer).SysMenuUpdate(ctx, req.(*SysMenuUpdateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SysMenuService_SysMenuDelete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SysMenuDeleteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SysMenuServiceServer).SysMenuDelete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SysMenuService_SysMenuDelete_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SysMenuServiceServer).SysMenuDelete(ctx, req.(*SysMenuDeleteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SysMenuService_SysMenu_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SysMenuRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SysMenuServiceServer).SysMenu(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SysMenuService_SysMenu_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SysMenuServiceServer).SysMenu(ctx, req.(*SysMenuRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SysMenuService_SysMenuParent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SysMenuParentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SysMenuServiceServer).SysMenuParent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SysMenuService_SysMenuParent_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SysMenuServiceServer).SysMenuParent(ctx, req.(*SysMenuParentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SysMenuService_SysMenuParentTotal_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SysMenuParentTotalRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SysMenuServiceServer).SysMenuParentTotal(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SysMenuService_SysMenuParentTotal_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SysMenuServiceServer).SysMenuParentTotal(ctx, req.(*SysMenuParentTotalRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SysMenuService_SysMenuList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SysMenuListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SysMenuServiceServer).SysMenuList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SysMenuService_SysMenuList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SysMenuServiceServer).SysMenuList(ctx, req.(*SysMenuListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SysMenuService_SysMenuListTotal_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SysMenuListTotalRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SysMenuServiceServer).SysMenuListTotal(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SysMenuService_SysMenuListTotal_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SysMenuServiceServer).SysMenuListTotal(ctx, req.(*SysMenuListTotalRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// SysMenuService_ServiceDesc is the grpc.ServiceDesc for SysMenuService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var SysMenuService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "menu.SysMenuService",
	HandlerType: (*SysMenuServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SysMenuCreate",
			Handler:    _SysMenuService_SysMenuCreate_Handler,
		},
		{
			MethodName: "SysMenuUpdate",
			Handler:    _SysMenuService_SysMenuUpdate_Handler,
		},
		{
			MethodName: "SysMenuDelete",
			Handler:    _SysMenuService_SysMenuDelete_Handler,
		},
		{
			MethodName: "SysMenu",
			Handler:    _SysMenuService_SysMenu_Handler,
		},
		{
			MethodName: "SysMenuParent",
			Handler:    _SysMenuService_SysMenuParent_Handler,
		},
		{
			MethodName: "SysMenuParentTotal",
			Handler:    _SysMenuService_SysMenuParentTotal_Handler,
		},
		{
			MethodName: "SysMenuList",
			Handler:    _SysMenuService_SysMenuList_Handler,
		},
		{
			MethodName: "SysMenuListTotal",
			Handler:    _SysMenuService_SysMenuListTotal_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "sys_menu.proto",
}
