// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v6.33.0
// source: sys_logger_operate.proto

// sys_logger_operate 操作日志

package logger

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	SysLoggerOperateService_SysLoggerOperateCreate_FullMethodName    = "/logger.SysLoggerOperateService/SysLoggerOperateCreate"
	SysLoggerOperateService_SysLoggerOperateUpdate_FullMethodName    = "/logger.SysLoggerOperateService/SysLoggerOperateUpdate"
	SysLoggerOperateService_SysLoggerOperateDelete_FullMethodName    = "/logger.SysLoggerOperateService/SysLoggerOperateDelete"
	SysLoggerOperateService_SysLoggerOperate_FullMethodName          = "/logger.SysLoggerOperateService/SysLoggerOperate"
	SysLoggerOperateService_SysLoggerOperateRecover_FullMethodName   = "/logger.SysLoggerOperateService/SysLoggerOperateRecover"
	SysLoggerOperateService_SysLoggerOperateDrop_FullMethodName      = "/logger.SysLoggerOperateService/SysLoggerOperateDrop"
	SysLoggerOperateService_SysLoggerOperateList_FullMethodName      = "/logger.SysLoggerOperateService/SysLoggerOperateList"
	SysLoggerOperateService_SysLoggerOperateListTotal_FullMethodName = "/logger.SysLoggerOperateService/SysLoggerOperateListTotal"
)

// SysLoggerOperateServiceClient is the client API for SysLoggerOperateService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// SysLoggerOperateService 服务
type SysLoggerOperateServiceClient interface {
	SysLoggerOperateCreate(ctx context.Context, in *SysLoggerOperateCreateRequest, opts ...grpc.CallOption) (*SysLoggerOperateCreateResponse, error)
	SysLoggerOperateUpdate(ctx context.Context, in *SysLoggerOperateUpdateRequest, opts ...grpc.CallOption) (*SysLoggerOperateUpdateResponse, error)
	SysLoggerOperateDelete(ctx context.Context, in *SysLoggerOperateDeleteRequest, opts ...grpc.CallOption) (*SysLoggerOperateDeleteResponse, error)
	SysLoggerOperate(ctx context.Context, in *SysLoggerOperateRequest, opts ...grpc.CallOption) (*SysLoggerOperateResponse, error)
	SysLoggerOperateRecover(ctx context.Context, in *SysLoggerOperateRecoverRequest, opts ...grpc.CallOption) (*SysLoggerOperateRecoverResponse, error)
	SysLoggerOperateDrop(ctx context.Context, in *SysLoggerOperateDropRequest, opts ...grpc.CallOption) (*SysLoggerOperateDropResponse, error)
	SysLoggerOperateList(ctx context.Context, in *SysLoggerOperateListRequest, opts ...grpc.CallOption) (*SysLoggerOperateListResponse, error)
	SysLoggerOperateListTotal(ctx context.Context, in *SysLoggerOperateListTotalRequest, opts ...grpc.CallOption) (*SysLoggerOperateTotalResponse, error)
}

type sysLoggerOperateServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewSysLoggerOperateServiceClient(cc grpc.ClientConnInterface) SysLoggerOperateServiceClient {
	return &sysLoggerOperateServiceClient{cc}
}

func (c *sysLoggerOperateServiceClient) SysLoggerOperateCreate(ctx context.Context, in *SysLoggerOperateCreateRequest, opts ...grpc.CallOption) (*SysLoggerOperateCreateResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SysLoggerOperateCreateResponse)
	err := c.cc.Invoke(ctx, SysLoggerOperateService_SysLoggerOperateCreate_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sysLoggerOperateServiceClient) SysLoggerOperateUpdate(ctx context.Context, in *SysLoggerOperateUpdateRequest, opts ...grpc.CallOption) (*SysLoggerOperateUpdateResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SysLoggerOperateUpdateResponse)
	err := c.cc.Invoke(ctx, SysLoggerOperateService_SysLoggerOperateUpdate_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sysLoggerOperateServiceClient) SysLoggerOperateDelete(ctx context.Context, in *SysLoggerOperateDeleteRequest, opts ...grpc.CallOption) (*SysLoggerOperateDeleteResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SysLoggerOperateDeleteResponse)
	err := c.cc.Invoke(ctx, SysLoggerOperateService_SysLoggerOperateDelete_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sysLoggerOperateServiceClient) SysLoggerOperate(ctx context.Context, in *SysLoggerOperateRequest, opts ...grpc.CallOption) (*SysLoggerOperateResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SysLoggerOperateResponse)
	err := c.cc.Invoke(ctx, SysLoggerOperateService_SysLoggerOperate_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sysLoggerOperateServiceClient) SysLoggerOperateRecover(ctx context.Context, in *SysLoggerOperateRecoverRequest, opts ...grpc.CallOption) (*SysLoggerOperateRecoverResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SysLoggerOperateRecoverResponse)
	err := c.cc.Invoke(ctx, SysLoggerOperateService_SysLoggerOperateRecover_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sysLoggerOperateServiceClient) SysLoggerOperateDrop(ctx context.Context, in *SysLoggerOperateDropRequest, opts ...grpc.CallOption) (*SysLoggerOperateDropResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SysLoggerOperateDropResponse)
	err := c.cc.Invoke(ctx, SysLoggerOperateService_SysLoggerOperateDrop_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sysLoggerOperateServiceClient) SysLoggerOperateList(ctx context.Context, in *SysLoggerOperateListRequest, opts ...grpc.CallOption) (*SysLoggerOperateListResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SysLoggerOperateListResponse)
	err := c.cc.Invoke(ctx, SysLoggerOperateService_SysLoggerOperateList_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sysLoggerOperateServiceClient) SysLoggerOperateListTotal(ctx context.Context, in *SysLoggerOperateListTotalRequest, opts ...grpc.CallOption) (*SysLoggerOperateTotalResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SysLoggerOperateTotalResponse)
	err := c.cc.Invoke(ctx, SysLoggerOperateService_SysLoggerOperateListTotal_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SysLoggerOperateServiceServer is the server API for SysLoggerOperateService service.
// All implementations must embed UnimplementedSysLoggerOperateServiceServer
// for forward compatibility.
//
// SysLoggerOperateService 服务
type SysLoggerOperateServiceServer interface {
	SysLoggerOperateCreate(context.Context, *SysLoggerOperateCreateRequest) (*SysLoggerOperateCreateResponse, error)
	SysLoggerOperateUpdate(context.Context, *SysLoggerOperateUpdateRequest) (*SysLoggerOperateUpdateResponse, error)
	SysLoggerOperateDelete(context.Context, *SysLoggerOperateDeleteRequest) (*SysLoggerOperateDeleteResponse, error)
	SysLoggerOperate(context.Context, *SysLoggerOperateRequest) (*SysLoggerOperateResponse, error)
	SysLoggerOperateRecover(context.Context, *SysLoggerOperateRecoverRequest) (*SysLoggerOperateRecoverResponse, error)
	SysLoggerOperateDrop(context.Context, *SysLoggerOperateDropRequest) (*SysLoggerOperateDropResponse, error)
	SysLoggerOperateList(context.Context, *SysLoggerOperateListRequest) (*SysLoggerOperateListResponse, error)
	SysLoggerOperateListTotal(context.Context, *SysLoggerOperateListTotalRequest) (*SysLoggerOperateTotalResponse, error)
	mustEmbedUnimplementedSysLoggerOperateServiceServer()
}

// UnimplementedSysLoggerOperateServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedSysLoggerOperateServiceServer struct{}

func (UnimplementedSysLoggerOperateServiceServer) SysLoggerOperateCreate(context.Context, *SysLoggerOperateCreateRequest) (*SysLoggerOperateCreateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SysLoggerOperateCreate not implemented")
}
func (UnimplementedSysLoggerOperateServiceServer) SysLoggerOperateUpdate(context.Context, *SysLoggerOperateUpdateRequest) (*SysLoggerOperateUpdateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SysLoggerOperateUpdate not implemented")
}
func (UnimplementedSysLoggerOperateServiceServer) SysLoggerOperateDelete(context.Context, *SysLoggerOperateDeleteRequest) (*SysLoggerOperateDeleteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SysLoggerOperateDelete not implemented")
}
func (UnimplementedSysLoggerOperateServiceServer) SysLoggerOperate(context.Context, *SysLoggerOperateRequest) (*SysLoggerOperateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SysLoggerOperate not implemented")
}
func (UnimplementedSysLoggerOperateServiceServer) SysLoggerOperateRecover(context.Context, *SysLoggerOperateRecoverRequest) (*SysLoggerOperateRecoverResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SysLoggerOperateRecover not implemented")
}
func (UnimplementedSysLoggerOperateServiceServer) SysLoggerOperateDrop(context.Context, *SysLoggerOperateDropRequest) (*SysLoggerOperateDropResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SysLoggerOperateDrop not implemented")
}
func (UnimplementedSysLoggerOperateServiceServer) SysLoggerOperateList(context.Context, *SysLoggerOperateListRequest) (*SysLoggerOperateListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SysLoggerOperateList not implemented")
}
func (UnimplementedSysLoggerOperateServiceServer) SysLoggerOperateListTotal(context.Context, *SysLoggerOperateListTotalRequest) (*SysLoggerOperateTotalResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SysLoggerOperateListTotal not implemented")
}
func (UnimplementedSysLoggerOperateServiceServer) mustEmbedUnimplementedSysLoggerOperateServiceServer() {
}
func (UnimplementedSysLoggerOperateServiceServer) testEmbeddedByValue() {}

// UnsafeSysLoggerOperateServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SysLoggerOperateServiceServer will
// result in compilation errors.
type UnsafeSysLoggerOperateServiceServer interface {
	mustEmbedUnimplementedSysLoggerOperateServiceServer()
}

func RegisterSysLoggerOperateServiceServer(s grpc.ServiceRegistrar, srv SysLoggerOperateServiceServer) {
	// If the following call pancis, it indicates UnimplementedSysLoggerOperateServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&SysLoggerOperateService_ServiceDesc, srv)
}

func _SysLoggerOperateService_SysLoggerOperateCreate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SysLoggerOperateCreateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SysLoggerOperateServiceServer).SysLoggerOperateCreate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SysLoggerOperateService_SysLoggerOperateCreate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SysLoggerOperateServiceServer).SysLoggerOperateCreate(ctx, req.(*SysLoggerOperateCreateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SysLoggerOperateService_SysLoggerOperateUpdate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SysLoggerOperateUpdateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SysLoggerOperateServiceServer).SysLoggerOperateUpdate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SysLoggerOperateService_SysLoggerOperateUpdate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SysLoggerOperateServiceServer).SysLoggerOperateUpdate(ctx, req.(*SysLoggerOperateUpdateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SysLoggerOperateService_SysLoggerOperateDelete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SysLoggerOperateDeleteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SysLoggerOperateServiceServer).SysLoggerOperateDelete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SysLoggerOperateService_SysLoggerOperateDelete_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SysLoggerOperateServiceServer).SysLoggerOperateDelete(ctx, req.(*SysLoggerOperateDeleteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SysLoggerOperateService_SysLoggerOperate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SysLoggerOperateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SysLoggerOperateServiceServer).SysLoggerOperate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SysLoggerOperateService_SysLoggerOperate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SysLoggerOperateServiceServer).SysLoggerOperate(ctx, req.(*SysLoggerOperateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SysLoggerOperateService_SysLoggerOperateRecover_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SysLoggerOperateRecoverRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SysLoggerOperateServiceServer).SysLoggerOperateRecover(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SysLoggerOperateService_SysLoggerOperateRecover_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SysLoggerOperateServiceServer).SysLoggerOperateRecover(ctx, req.(*SysLoggerOperateRecoverRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SysLoggerOperateService_SysLoggerOperateDrop_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SysLoggerOperateDropRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SysLoggerOperateServiceServer).SysLoggerOperateDrop(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SysLoggerOperateService_SysLoggerOperateDrop_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SysLoggerOperateServiceServer).SysLoggerOperateDrop(ctx, req.(*SysLoggerOperateDropRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SysLoggerOperateService_SysLoggerOperateList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SysLoggerOperateListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SysLoggerOperateServiceServer).SysLoggerOperateList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SysLoggerOperateService_SysLoggerOperateList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SysLoggerOperateServiceServer).SysLoggerOperateList(ctx, req.(*SysLoggerOperateListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SysLoggerOperateService_SysLoggerOperateListTotal_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SysLoggerOperateListTotalRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SysLoggerOperateServiceServer).SysLoggerOperateListTotal(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SysLoggerOperateService_SysLoggerOperateListTotal_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SysLoggerOperateServiceServer).SysLoggerOperateListTotal(ctx, req.(*SysLoggerOperateListTotalRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// SysLoggerOperateService_ServiceDesc is the grpc.ServiceDesc for SysLoggerOperateService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var SysLoggerOperateService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "logger.SysLoggerOperateService",
	HandlerType: (*SysLoggerOperateServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SysLoggerOperateCreate",
			Handler:    _SysLoggerOperateService_SysLoggerOperateCreate_Handler,
		},
		{
			MethodName: "SysLoggerOperateUpdate",
			Handler:    _SysLoggerOperateService_SysLoggerOperateUpdate_Handler,
		},
		{
			MethodName: "SysLoggerOperateDelete",
			Handler:    _SysLoggerOperateService_SysLoggerOperateDelete_Handler,
		},
		{
			MethodName: "SysLoggerOperate",
			Handler:    _SysLoggerOperateService_SysLoggerOperate_Handler,
		},
		{
			MethodName: "SysLoggerOperateRecover",
			Handler:    _SysLoggerOperateService_SysLoggerOperateRecover_Handler,
		},
		{
			MethodName: "SysLoggerOperateDrop",
			Handler:    _SysLoggerOperateService_SysLoggerOperateDrop_Handler,
		},
		{
			MethodName: "SysLoggerOperateList",
			Handler:    _SysLoggerOperateService_SysLoggerOperateList_Handler,
		},
		{
			MethodName: "SysLoggerOperateListTotal",
			Handler:    _SysLoggerOperateService_SysLoggerOperateListTotal_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "sys_logger_operate.proto",
}
