// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v6.33.0
// source: sys_logger_dev.proto

// sys_logger_dev 开发日志

package logger

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	SysLoggerDevService_SysLoggerDevCreate_FullMethodName    = "/logger.SysLoggerDevService/SysLoggerDevCreate"
	SysLoggerDevService_SysLoggerDevUpdate_FullMethodName    = "/logger.SysLoggerDevService/SysLoggerDevUpdate"
	SysLoggerDevService_SysLoggerDevDelete_FullMethodName    = "/logger.SysLoggerDevService/SysLoggerDevDelete"
	SysLoggerDevService_SysLoggerDev_FullMethodName          = "/logger.SysLoggerDevService/SysLoggerDev"
	SysLoggerDevService_SysLoggerDevList_FullMethodName      = "/logger.SysLoggerDevService/SysLoggerDevList"
	SysLoggerDevService_SysLoggerDevListTotal_FullMethodName = "/logger.SysLoggerDevService/SysLoggerDevListTotal"
)

// SysLoggerDevServiceClient is the client API for SysLoggerDevService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// SysLoggerDevService 服务
type SysLoggerDevServiceClient interface {
	SysLoggerDevCreate(ctx context.Context, in *SysLoggerDevCreateRequest, opts ...grpc.CallOption) (*SysLoggerDevCreateResponse, error)
	SysLoggerDevUpdate(ctx context.Context, in *SysLoggerDevUpdateRequest, opts ...grpc.CallOption) (*SysLoggerDevUpdateResponse, error)
	SysLoggerDevDelete(ctx context.Context, in *SysLoggerDevDeleteRequest, opts ...grpc.CallOption) (*SysLoggerDevDeleteResponse, error)
	SysLoggerDev(ctx context.Context, in *SysLoggerDevRequest, opts ...grpc.CallOption) (*SysLoggerDevResponse, error)
	SysLoggerDevList(ctx context.Context, in *SysLoggerDevListRequest, opts ...grpc.CallOption) (*SysLoggerDevListResponse, error)
	SysLoggerDevListTotal(ctx context.Context, in *SysLoggerDevListTotalRequest, opts ...grpc.CallOption) (*SysLoggerDevTotalResponse, error)
}

type sysLoggerDevServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewSysLoggerDevServiceClient(cc grpc.ClientConnInterface) SysLoggerDevServiceClient {
	return &sysLoggerDevServiceClient{cc}
}

func (c *sysLoggerDevServiceClient) SysLoggerDevCreate(ctx context.Context, in *SysLoggerDevCreateRequest, opts ...grpc.CallOption) (*SysLoggerDevCreateResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SysLoggerDevCreateResponse)
	err := c.cc.Invoke(ctx, SysLoggerDevService_SysLoggerDevCreate_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sysLoggerDevServiceClient) SysLoggerDevUpdate(ctx context.Context, in *SysLoggerDevUpdateRequest, opts ...grpc.CallOption) (*SysLoggerDevUpdateResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SysLoggerDevUpdateResponse)
	err := c.cc.Invoke(ctx, SysLoggerDevService_SysLoggerDevUpdate_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sysLoggerDevServiceClient) SysLoggerDevDelete(ctx context.Context, in *SysLoggerDevDeleteRequest, opts ...grpc.CallOption) (*SysLoggerDevDeleteResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SysLoggerDevDeleteResponse)
	err := c.cc.Invoke(ctx, SysLoggerDevService_SysLoggerDevDelete_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sysLoggerDevServiceClient) SysLoggerDev(ctx context.Context, in *SysLoggerDevRequest, opts ...grpc.CallOption) (*SysLoggerDevResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SysLoggerDevResponse)
	err := c.cc.Invoke(ctx, SysLoggerDevService_SysLoggerDev_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sysLoggerDevServiceClient) SysLoggerDevList(ctx context.Context, in *SysLoggerDevListRequest, opts ...grpc.CallOption) (*SysLoggerDevListResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SysLoggerDevListResponse)
	err := c.cc.Invoke(ctx, SysLoggerDevService_SysLoggerDevList_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sysLoggerDevServiceClient) SysLoggerDevListTotal(ctx context.Context, in *SysLoggerDevListTotalRequest, opts ...grpc.CallOption) (*SysLoggerDevTotalResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SysLoggerDevTotalResponse)
	err := c.cc.Invoke(ctx, SysLoggerDevService_SysLoggerDevListTotal_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SysLoggerDevServiceServer is the server API for SysLoggerDevService service.
// All implementations must embed UnimplementedSysLoggerDevServiceServer
// for forward compatibility.
//
// SysLoggerDevService 服务
type SysLoggerDevServiceServer interface {
	SysLoggerDevCreate(context.Context, *SysLoggerDevCreateRequest) (*SysLoggerDevCreateResponse, error)
	SysLoggerDevUpdate(context.Context, *SysLoggerDevUpdateRequest) (*SysLoggerDevUpdateResponse, error)
	SysLoggerDevDelete(context.Context, *SysLoggerDevDeleteRequest) (*SysLoggerDevDeleteResponse, error)
	SysLoggerDev(context.Context, *SysLoggerDevRequest) (*SysLoggerDevResponse, error)
	SysLoggerDevList(context.Context, *SysLoggerDevListRequest) (*SysLoggerDevListResponse, error)
	SysLoggerDevListTotal(context.Context, *SysLoggerDevListTotalRequest) (*SysLoggerDevTotalResponse, error)
	mustEmbedUnimplementedSysLoggerDevServiceServer()
}

// UnimplementedSysLoggerDevServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedSysLoggerDevServiceServer struct{}

func (UnimplementedSysLoggerDevServiceServer) SysLoggerDevCreate(context.Context, *SysLoggerDevCreateRequest) (*SysLoggerDevCreateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SysLoggerDevCreate not implemented")
}
func (UnimplementedSysLoggerDevServiceServer) SysLoggerDevUpdate(context.Context, *SysLoggerDevUpdateRequest) (*SysLoggerDevUpdateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SysLoggerDevUpdate not implemented")
}
func (UnimplementedSysLoggerDevServiceServer) SysLoggerDevDelete(context.Context, *SysLoggerDevDeleteRequest) (*SysLoggerDevDeleteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SysLoggerDevDelete not implemented")
}
func (UnimplementedSysLoggerDevServiceServer) SysLoggerDev(context.Context, *SysLoggerDevRequest) (*SysLoggerDevResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SysLoggerDev not implemented")
}
func (UnimplementedSysLoggerDevServiceServer) SysLoggerDevList(context.Context, *SysLoggerDevListRequest) (*SysLoggerDevListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SysLoggerDevList not implemented")
}
func (UnimplementedSysLoggerDevServiceServer) SysLoggerDevListTotal(context.Context, *SysLoggerDevListTotalRequest) (*SysLoggerDevTotalResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SysLoggerDevListTotal not implemented")
}
func (UnimplementedSysLoggerDevServiceServer) mustEmbedUnimplementedSysLoggerDevServiceServer() {}
func (UnimplementedSysLoggerDevServiceServer) testEmbeddedByValue()                             {}

// UnsafeSysLoggerDevServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SysLoggerDevServiceServer will
// result in compilation errors.
type UnsafeSysLoggerDevServiceServer interface {
	mustEmbedUnimplementedSysLoggerDevServiceServer()
}

func RegisterSysLoggerDevServiceServer(s grpc.ServiceRegistrar, srv SysLoggerDevServiceServer) {
	// If the following call pancis, it indicates UnimplementedSysLoggerDevServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&SysLoggerDevService_ServiceDesc, srv)
}

func _SysLoggerDevService_SysLoggerDevCreate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SysLoggerDevCreateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SysLoggerDevServiceServer).SysLoggerDevCreate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SysLoggerDevService_SysLoggerDevCreate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SysLoggerDevServiceServer).SysLoggerDevCreate(ctx, req.(*SysLoggerDevCreateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SysLoggerDevService_SysLoggerDevUpdate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SysLoggerDevUpdateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SysLoggerDevServiceServer).SysLoggerDevUpdate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SysLoggerDevService_SysLoggerDevUpdate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SysLoggerDevServiceServer).SysLoggerDevUpdate(ctx, req.(*SysLoggerDevUpdateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SysLoggerDevService_SysLoggerDevDelete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SysLoggerDevDeleteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SysLoggerDevServiceServer).SysLoggerDevDelete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SysLoggerDevService_SysLoggerDevDelete_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SysLoggerDevServiceServer).SysLoggerDevDelete(ctx, req.(*SysLoggerDevDeleteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SysLoggerDevService_SysLoggerDev_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SysLoggerDevRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SysLoggerDevServiceServer).SysLoggerDev(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SysLoggerDevService_SysLoggerDev_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SysLoggerDevServiceServer).SysLoggerDev(ctx, req.(*SysLoggerDevRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SysLoggerDevService_SysLoggerDevList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SysLoggerDevListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SysLoggerDevServiceServer).SysLoggerDevList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SysLoggerDevService_SysLoggerDevList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SysLoggerDevServiceServer).SysLoggerDevList(ctx, req.(*SysLoggerDevListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SysLoggerDevService_SysLoggerDevListTotal_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SysLoggerDevListTotalRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SysLoggerDevServiceServer).SysLoggerDevListTotal(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SysLoggerDevService_SysLoggerDevListTotal_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SysLoggerDevServiceServer).SysLoggerDevListTotal(ctx, req.(*SysLoggerDevListTotalRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// SysLoggerDevService_ServiceDesc is the grpc.ServiceDesc for SysLoggerDevService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var SysLoggerDevService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "logger.SysLoggerDevService",
	HandlerType: (*SysLoggerDevServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SysLoggerDevCreate",
			Handler:    _SysLoggerDevService_SysLoggerDevCreate_Handler,
		},
		{
			MethodName: "SysLoggerDevUpdate",
			Handler:    _SysLoggerDevService_SysLoggerDevUpdate_Handler,
		},
		{
			MethodName: "SysLoggerDevDelete",
			Handler:    _SysLoggerDevService_SysLoggerDevDelete_Handler,
		},
		{
			MethodName: "SysLoggerDev",
			Handler:    _SysLoggerDevService_SysLoggerDev_Handler,
		},
		{
			MethodName: "SysLoggerDevList",
			Handler:    _SysLoggerDevService_SysLoggerDevList_Handler,
		},
		{
			MethodName: "SysLoggerDevListTotal",
			Handler:    _SysLoggerDevService_SysLoggerDevListTotal_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "sys_logger_dev.proto",
}
