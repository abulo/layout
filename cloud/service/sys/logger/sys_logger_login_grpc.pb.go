// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v6.33.0
// source: sys_logger_login.proto

// sys_logger_login 登录日志

package logger

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	SysLoggerLoginService_SysLoggerLoginCreate_FullMethodName    = "/logger.SysLoggerLoginService/SysLoggerLoginCreate"
	SysLoggerLoginService_SysLoggerLoginUpdate_FullMethodName    = "/logger.SysLoggerLoginService/SysLoggerLoginUpdate"
	SysLoggerLoginService_SysLoggerLoginDelete_FullMethodName    = "/logger.SysLoggerLoginService/SysLoggerLoginDelete"
	SysLoggerLoginService_SysLoggerLogin_FullMethodName          = "/logger.SysLoggerLoginService/SysLoggerLogin"
	SysLoggerLoginService_SysLoggerLoginRecover_FullMethodName   = "/logger.SysLoggerLoginService/SysLoggerLoginRecover"
	SysLoggerLoginService_SysLoggerLoginDrop_FullMethodName      = "/logger.SysLoggerLoginService/SysLoggerLoginDrop"
	SysLoggerLoginService_SysLoggerLoginList_FullMethodName      = "/logger.SysLoggerLoginService/SysLoggerLoginList"
	SysLoggerLoginService_SysLoggerLoginListTotal_FullMethodName = "/logger.SysLoggerLoginService/SysLoggerLoginListTotal"
)

// SysLoggerLoginServiceClient is the client API for SysLoggerLoginService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// SysLoggerLoginService 服务
type SysLoggerLoginServiceClient interface {
	SysLoggerLoginCreate(ctx context.Context, in *SysLoggerLoginCreateRequest, opts ...grpc.CallOption) (*SysLoggerLoginCreateResponse, error)
	SysLoggerLoginUpdate(ctx context.Context, in *SysLoggerLoginUpdateRequest, opts ...grpc.CallOption) (*SysLoggerLoginUpdateResponse, error)
	SysLoggerLoginDelete(ctx context.Context, in *SysLoggerLoginDeleteRequest, opts ...grpc.CallOption) (*SysLoggerLoginDeleteResponse, error)
	SysLoggerLogin(ctx context.Context, in *SysLoggerLoginRequest, opts ...grpc.CallOption) (*SysLoggerLoginResponse, error)
	SysLoggerLoginRecover(ctx context.Context, in *SysLoggerLoginRecoverRequest, opts ...grpc.CallOption) (*SysLoggerLoginRecoverResponse, error)
	SysLoggerLoginDrop(ctx context.Context, in *SysLoggerLoginDropRequest, opts ...grpc.CallOption) (*SysLoggerLoginDropResponse, error)
	SysLoggerLoginList(ctx context.Context, in *SysLoggerLoginListRequest, opts ...grpc.CallOption) (*SysLoggerLoginListResponse, error)
	SysLoggerLoginListTotal(ctx context.Context, in *SysLoggerLoginListTotalRequest, opts ...grpc.CallOption) (*SysLoggerLoginTotalResponse, error)
}

type sysLoggerLoginServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewSysLoggerLoginServiceClient(cc grpc.ClientConnInterface) SysLoggerLoginServiceClient {
	return &sysLoggerLoginServiceClient{cc}
}

func (c *sysLoggerLoginServiceClient) SysLoggerLoginCreate(ctx context.Context, in *SysLoggerLoginCreateRequest, opts ...grpc.CallOption) (*SysLoggerLoginCreateResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SysLoggerLoginCreateResponse)
	err := c.cc.Invoke(ctx, SysLoggerLoginService_SysLoggerLoginCreate_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sysLoggerLoginServiceClient) SysLoggerLoginUpdate(ctx context.Context, in *SysLoggerLoginUpdateRequest, opts ...grpc.CallOption) (*SysLoggerLoginUpdateResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SysLoggerLoginUpdateResponse)
	err := c.cc.Invoke(ctx, SysLoggerLoginService_SysLoggerLoginUpdate_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sysLoggerLoginServiceClient) SysLoggerLoginDelete(ctx context.Context, in *SysLoggerLoginDeleteRequest, opts ...grpc.CallOption) (*SysLoggerLoginDeleteResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SysLoggerLoginDeleteResponse)
	err := c.cc.Invoke(ctx, SysLoggerLoginService_SysLoggerLoginDelete_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sysLoggerLoginServiceClient) SysLoggerLogin(ctx context.Context, in *SysLoggerLoginRequest, opts ...grpc.CallOption) (*SysLoggerLoginResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SysLoggerLoginResponse)
	err := c.cc.Invoke(ctx, SysLoggerLoginService_SysLoggerLogin_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sysLoggerLoginServiceClient) SysLoggerLoginRecover(ctx context.Context, in *SysLoggerLoginRecoverRequest, opts ...grpc.CallOption) (*SysLoggerLoginRecoverResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SysLoggerLoginRecoverResponse)
	err := c.cc.Invoke(ctx, SysLoggerLoginService_SysLoggerLoginRecover_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sysLoggerLoginServiceClient) SysLoggerLoginDrop(ctx context.Context, in *SysLoggerLoginDropRequest, opts ...grpc.CallOption) (*SysLoggerLoginDropResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SysLoggerLoginDropResponse)
	err := c.cc.Invoke(ctx, SysLoggerLoginService_SysLoggerLoginDrop_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sysLoggerLoginServiceClient) SysLoggerLoginList(ctx context.Context, in *SysLoggerLoginListRequest, opts ...grpc.CallOption) (*SysLoggerLoginListResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SysLoggerLoginListResponse)
	err := c.cc.Invoke(ctx, SysLoggerLoginService_SysLoggerLoginList_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sysLoggerLoginServiceClient) SysLoggerLoginListTotal(ctx context.Context, in *SysLoggerLoginListTotalRequest, opts ...grpc.CallOption) (*SysLoggerLoginTotalResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SysLoggerLoginTotalResponse)
	err := c.cc.Invoke(ctx, SysLoggerLoginService_SysLoggerLoginListTotal_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SysLoggerLoginServiceServer is the server API for SysLoggerLoginService service.
// All implementations must embed UnimplementedSysLoggerLoginServiceServer
// for forward compatibility.
//
// SysLoggerLoginService 服务
type SysLoggerLoginServiceServer interface {
	SysLoggerLoginCreate(context.Context, *SysLoggerLoginCreateRequest) (*SysLoggerLoginCreateResponse, error)
	SysLoggerLoginUpdate(context.Context, *SysLoggerLoginUpdateRequest) (*SysLoggerLoginUpdateResponse, error)
	SysLoggerLoginDelete(context.Context, *SysLoggerLoginDeleteRequest) (*SysLoggerLoginDeleteResponse, error)
	SysLoggerLogin(context.Context, *SysLoggerLoginRequest) (*SysLoggerLoginResponse, error)
	SysLoggerLoginRecover(context.Context, *SysLoggerLoginRecoverRequest) (*SysLoggerLoginRecoverResponse, error)
	SysLoggerLoginDrop(context.Context, *SysLoggerLoginDropRequest) (*SysLoggerLoginDropResponse, error)
	SysLoggerLoginList(context.Context, *SysLoggerLoginListRequest) (*SysLoggerLoginListResponse, error)
	SysLoggerLoginListTotal(context.Context, *SysLoggerLoginListTotalRequest) (*SysLoggerLoginTotalResponse, error)
	mustEmbedUnimplementedSysLoggerLoginServiceServer()
}

// UnimplementedSysLoggerLoginServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedSysLoggerLoginServiceServer struct{}

func (UnimplementedSysLoggerLoginServiceServer) SysLoggerLoginCreate(context.Context, *SysLoggerLoginCreateRequest) (*SysLoggerLoginCreateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SysLoggerLoginCreate not implemented")
}
func (UnimplementedSysLoggerLoginServiceServer) SysLoggerLoginUpdate(context.Context, *SysLoggerLoginUpdateRequest) (*SysLoggerLoginUpdateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SysLoggerLoginUpdate not implemented")
}
func (UnimplementedSysLoggerLoginServiceServer) SysLoggerLoginDelete(context.Context, *SysLoggerLoginDeleteRequest) (*SysLoggerLoginDeleteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SysLoggerLoginDelete not implemented")
}
func (UnimplementedSysLoggerLoginServiceServer) SysLoggerLogin(context.Context, *SysLoggerLoginRequest) (*SysLoggerLoginResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SysLoggerLogin not implemented")
}
func (UnimplementedSysLoggerLoginServiceServer) SysLoggerLoginRecover(context.Context, *SysLoggerLoginRecoverRequest) (*SysLoggerLoginRecoverResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SysLoggerLoginRecover not implemented")
}
func (UnimplementedSysLoggerLoginServiceServer) SysLoggerLoginDrop(context.Context, *SysLoggerLoginDropRequest) (*SysLoggerLoginDropResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SysLoggerLoginDrop not implemented")
}
func (UnimplementedSysLoggerLoginServiceServer) SysLoggerLoginList(context.Context, *SysLoggerLoginListRequest) (*SysLoggerLoginListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SysLoggerLoginList not implemented")
}
func (UnimplementedSysLoggerLoginServiceServer) SysLoggerLoginListTotal(context.Context, *SysLoggerLoginListTotalRequest) (*SysLoggerLoginTotalResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SysLoggerLoginListTotal not implemented")
}
func (UnimplementedSysLoggerLoginServiceServer) mustEmbedUnimplementedSysLoggerLoginServiceServer() {}
func (UnimplementedSysLoggerLoginServiceServer) testEmbeddedByValue()                               {}

// UnsafeSysLoggerLoginServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SysLoggerLoginServiceServer will
// result in compilation errors.
type UnsafeSysLoggerLoginServiceServer interface {
	mustEmbedUnimplementedSysLoggerLoginServiceServer()
}

func RegisterSysLoggerLoginServiceServer(s grpc.ServiceRegistrar, srv SysLoggerLoginServiceServer) {
	// If the following call pancis, it indicates UnimplementedSysLoggerLoginServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&SysLoggerLoginService_ServiceDesc, srv)
}

func _SysLoggerLoginService_SysLoggerLoginCreate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SysLoggerLoginCreateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SysLoggerLoginServiceServer).SysLoggerLoginCreate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SysLoggerLoginService_SysLoggerLoginCreate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SysLoggerLoginServiceServer).SysLoggerLoginCreate(ctx, req.(*SysLoggerLoginCreateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SysLoggerLoginService_SysLoggerLoginUpdate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SysLoggerLoginUpdateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SysLoggerLoginServiceServer).SysLoggerLoginUpdate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SysLoggerLoginService_SysLoggerLoginUpdate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SysLoggerLoginServiceServer).SysLoggerLoginUpdate(ctx, req.(*SysLoggerLoginUpdateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SysLoggerLoginService_SysLoggerLoginDelete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SysLoggerLoginDeleteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SysLoggerLoginServiceServer).SysLoggerLoginDelete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SysLoggerLoginService_SysLoggerLoginDelete_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SysLoggerLoginServiceServer).SysLoggerLoginDelete(ctx, req.(*SysLoggerLoginDeleteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SysLoggerLoginService_SysLoggerLogin_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SysLoggerLoginRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SysLoggerLoginServiceServer).SysLoggerLogin(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SysLoggerLoginService_SysLoggerLogin_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SysLoggerLoginServiceServer).SysLoggerLogin(ctx, req.(*SysLoggerLoginRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SysLoggerLoginService_SysLoggerLoginRecover_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SysLoggerLoginRecoverRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SysLoggerLoginServiceServer).SysLoggerLoginRecover(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SysLoggerLoginService_SysLoggerLoginRecover_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SysLoggerLoginServiceServer).SysLoggerLoginRecover(ctx, req.(*SysLoggerLoginRecoverRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SysLoggerLoginService_SysLoggerLoginDrop_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SysLoggerLoginDropRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SysLoggerLoginServiceServer).SysLoggerLoginDrop(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SysLoggerLoginService_SysLoggerLoginDrop_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SysLoggerLoginServiceServer).SysLoggerLoginDrop(ctx, req.(*SysLoggerLoginDropRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SysLoggerLoginService_SysLoggerLoginList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SysLoggerLoginListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SysLoggerLoginServiceServer).SysLoggerLoginList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SysLoggerLoginService_SysLoggerLoginList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SysLoggerLoginServiceServer).SysLoggerLoginList(ctx, req.(*SysLoggerLoginListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SysLoggerLoginService_SysLoggerLoginListTotal_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SysLoggerLoginListTotalRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SysLoggerLoginServiceServer).SysLoggerLoginListTotal(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SysLoggerLoginService_SysLoggerLoginListTotal_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SysLoggerLoginServiceServer).SysLoggerLoginListTotal(ctx, req.(*SysLoggerLoginListTotalRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// SysLoggerLoginService_ServiceDesc is the grpc.ServiceDesc for SysLoggerLoginService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var SysLoggerLoginService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "logger.SysLoggerLoginService",
	HandlerType: (*SysLoggerLoginServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SysLoggerLoginCreate",
			Handler:    _SysLoggerLoginService_SysLoggerLoginCreate_Handler,
		},
		{
			MethodName: "SysLoggerLoginUpdate",
			Handler:    _SysLoggerLoginService_SysLoggerLoginUpdate_Handler,
		},
		{
			MethodName: "SysLoggerLoginDelete",
			Handler:    _SysLoggerLoginService_SysLoggerLoginDelete_Handler,
		},
		{
			MethodName: "SysLoggerLogin",
			Handler:    _SysLoggerLoginService_SysLoggerLogin_Handler,
		},
		{
			MethodName: "SysLoggerLoginRecover",
			Handler:    _SysLoggerLoginService_SysLoggerLoginRecover_Handler,
		},
		{
			MethodName: "SysLoggerLoginDrop",
			Handler:    _SysLoggerLoginService_SysLoggerLoginDrop_Handler,
		},
		{
			MethodName: "SysLoggerLoginList",
			Handler:    _SysLoggerLoginService_SysLoggerLoginList_Handler,
		},
		{
			MethodName: "SysLoggerLoginListTotal",
			Handler:    _SysLoggerLoginService_SysLoggerLoginListTotal_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "sys_logger_login.proto",
}
