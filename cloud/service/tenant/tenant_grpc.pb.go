// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v6.32.1
// source: tenant.proto

// tenant 租户

package tenant

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	TenantService_TenantCreate_FullMethodName    = "/tenant.TenantService/TenantCreate"
	TenantService_TenantUpdate_FullMethodName    = "/tenant.TenantService/TenantUpdate"
	TenantService_TenantDelete_FullMethodName    = "/tenant.TenantService/TenantDelete"
	TenantService_Tenant_FullMethodName          = "/tenant.TenantService/Tenant"
	TenantService_TenantRecover_FullMethodName   = "/tenant.TenantService/TenantRecover"
	TenantService_TenantDrop_FullMethodName      = "/tenant.TenantService/TenantDrop"
	TenantService_TenantList_FullMethodName      = "/tenant.TenantService/TenantList"
	TenantService_TenantListTotal_FullMethodName = "/tenant.TenantService/TenantListTotal"
)

// TenantServiceClient is the client API for TenantService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// TenantService 服务
type TenantServiceClient interface {
	TenantCreate(ctx context.Context, in *TenantCreateRequest, opts ...grpc.CallOption) (*TenantCreateResponse, error)
	TenantUpdate(ctx context.Context, in *TenantUpdateRequest, opts ...grpc.CallOption) (*TenantUpdateResponse, error)
	TenantDelete(ctx context.Context, in *TenantDeleteRequest, opts ...grpc.CallOption) (*TenantDeleteResponse, error)
	Tenant(ctx context.Context, in *TenantRequest, opts ...grpc.CallOption) (*TenantResponse, error)
	TenantRecover(ctx context.Context, in *TenantRecoverRequest, opts ...grpc.CallOption) (*TenantRecoverResponse, error)
	TenantDrop(ctx context.Context, in *TenantDropRequest, opts ...grpc.CallOption) (*TenantDropResponse, error)
	TenantList(ctx context.Context, in *TenantListRequest, opts ...grpc.CallOption) (*TenantListResponse, error)
	TenantListTotal(ctx context.Context, in *TenantListTotalRequest, opts ...grpc.CallOption) (*TenantTotalResponse, error)
}

type tenantServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewTenantServiceClient(cc grpc.ClientConnInterface) TenantServiceClient {
	return &tenantServiceClient{cc}
}

func (c *tenantServiceClient) TenantCreate(ctx context.Context, in *TenantCreateRequest, opts ...grpc.CallOption) (*TenantCreateResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(TenantCreateResponse)
	err := c.cc.Invoke(ctx, TenantService_TenantCreate_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tenantServiceClient) TenantUpdate(ctx context.Context, in *TenantUpdateRequest, opts ...grpc.CallOption) (*TenantUpdateResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(TenantUpdateResponse)
	err := c.cc.Invoke(ctx, TenantService_TenantUpdate_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tenantServiceClient) TenantDelete(ctx context.Context, in *TenantDeleteRequest, opts ...grpc.CallOption) (*TenantDeleteResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(TenantDeleteResponse)
	err := c.cc.Invoke(ctx, TenantService_TenantDelete_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tenantServiceClient) Tenant(ctx context.Context, in *TenantRequest, opts ...grpc.CallOption) (*TenantResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(TenantResponse)
	err := c.cc.Invoke(ctx, TenantService_Tenant_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tenantServiceClient) TenantRecover(ctx context.Context, in *TenantRecoverRequest, opts ...grpc.CallOption) (*TenantRecoverResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(TenantRecoverResponse)
	err := c.cc.Invoke(ctx, TenantService_TenantRecover_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tenantServiceClient) TenantDrop(ctx context.Context, in *TenantDropRequest, opts ...grpc.CallOption) (*TenantDropResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(TenantDropResponse)
	err := c.cc.Invoke(ctx, TenantService_TenantDrop_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tenantServiceClient) TenantList(ctx context.Context, in *TenantListRequest, opts ...grpc.CallOption) (*TenantListResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(TenantListResponse)
	err := c.cc.Invoke(ctx, TenantService_TenantList_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tenantServiceClient) TenantListTotal(ctx context.Context, in *TenantListTotalRequest, opts ...grpc.CallOption) (*TenantTotalResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(TenantTotalResponse)
	err := c.cc.Invoke(ctx, TenantService_TenantListTotal_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TenantServiceServer is the server API for TenantService service.
// All implementations must embed UnimplementedTenantServiceServer
// for forward compatibility.
//
// TenantService 服务
type TenantServiceServer interface {
	TenantCreate(context.Context, *TenantCreateRequest) (*TenantCreateResponse, error)
	TenantUpdate(context.Context, *TenantUpdateRequest) (*TenantUpdateResponse, error)
	TenantDelete(context.Context, *TenantDeleteRequest) (*TenantDeleteResponse, error)
	Tenant(context.Context, *TenantRequest) (*TenantResponse, error)
	TenantRecover(context.Context, *TenantRecoverRequest) (*TenantRecoverResponse, error)
	TenantDrop(context.Context, *TenantDropRequest) (*TenantDropResponse, error)
	TenantList(context.Context, *TenantListRequest) (*TenantListResponse, error)
	TenantListTotal(context.Context, *TenantListTotalRequest) (*TenantTotalResponse, error)
	mustEmbedUnimplementedTenantServiceServer()
}

// UnimplementedTenantServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedTenantServiceServer struct{}

func (UnimplementedTenantServiceServer) TenantCreate(context.Context, *TenantCreateRequest) (*TenantCreateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TenantCreate not implemented")
}
func (UnimplementedTenantServiceServer) TenantUpdate(context.Context, *TenantUpdateRequest) (*TenantUpdateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TenantUpdate not implemented")
}
func (UnimplementedTenantServiceServer) TenantDelete(context.Context, *TenantDeleteRequest) (*TenantDeleteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TenantDelete not implemented")
}
func (UnimplementedTenantServiceServer) Tenant(context.Context, *TenantRequest) (*TenantResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Tenant not implemented")
}
func (UnimplementedTenantServiceServer) TenantRecover(context.Context, *TenantRecoverRequest) (*TenantRecoverResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TenantRecover not implemented")
}
func (UnimplementedTenantServiceServer) TenantDrop(context.Context, *TenantDropRequest) (*TenantDropResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TenantDrop not implemented")
}
func (UnimplementedTenantServiceServer) TenantList(context.Context, *TenantListRequest) (*TenantListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TenantList not implemented")
}
func (UnimplementedTenantServiceServer) TenantListTotal(context.Context, *TenantListTotalRequest) (*TenantTotalResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TenantListTotal not implemented")
}
func (UnimplementedTenantServiceServer) mustEmbedUnimplementedTenantServiceServer() {}
func (UnimplementedTenantServiceServer) testEmbeddedByValue()                       {}

// UnsafeTenantServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to TenantServiceServer will
// result in compilation errors.
type UnsafeTenantServiceServer interface {
	mustEmbedUnimplementedTenantServiceServer()
}

func RegisterTenantServiceServer(s grpc.ServiceRegistrar, srv TenantServiceServer) {
	// If the following call pancis, it indicates UnimplementedTenantServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&TenantService_ServiceDesc, srv)
}

func _TenantService_TenantCreate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TenantCreateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TenantServiceServer).TenantCreate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TenantService_TenantCreate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TenantServiceServer).TenantCreate(ctx, req.(*TenantCreateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TenantService_TenantUpdate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TenantUpdateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TenantServiceServer).TenantUpdate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TenantService_TenantUpdate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TenantServiceServer).TenantUpdate(ctx, req.(*TenantUpdateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TenantService_TenantDelete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TenantDeleteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TenantServiceServer).TenantDelete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TenantService_TenantDelete_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TenantServiceServer).TenantDelete(ctx, req.(*TenantDeleteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TenantService_Tenant_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TenantRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TenantServiceServer).Tenant(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TenantService_Tenant_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TenantServiceServer).Tenant(ctx, req.(*TenantRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TenantService_TenantRecover_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TenantRecoverRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TenantServiceServer).TenantRecover(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TenantService_TenantRecover_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TenantServiceServer).TenantRecover(ctx, req.(*TenantRecoverRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TenantService_TenantDrop_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TenantDropRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TenantServiceServer).TenantDrop(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TenantService_TenantDrop_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TenantServiceServer).TenantDrop(ctx, req.(*TenantDropRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TenantService_TenantList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TenantListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TenantServiceServer).TenantList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TenantService_TenantList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TenantServiceServer).TenantList(ctx, req.(*TenantListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TenantService_TenantListTotal_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TenantListTotalRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TenantServiceServer).TenantListTotal(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TenantService_TenantListTotal_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TenantServiceServer).TenantListTotal(ctx, req.(*TenantListTotalRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// TenantService_ServiceDesc is the grpc.ServiceDesc for TenantService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var TenantService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "tenant.TenantService",
	HandlerType: (*TenantServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "TenantCreate",
			Handler:    _TenantService_TenantCreate_Handler,
		},
		{
			MethodName: "TenantUpdate",
			Handler:    _TenantService_TenantUpdate_Handler,
		},
		{
			MethodName: "TenantDelete",
			Handler:    _TenantService_TenantDelete_Handler,
		},
		{
			MethodName: "Tenant",
			Handler:    _TenantService_Tenant_Handler,
		},
		{
			MethodName: "TenantRecover",
			Handler:    _TenantService_TenantRecover_Handler,
		},
		{
			MethodName: "TenantDrop",
			Handler:    _TenantService_TenantDrop_Handler,
		},
		{
			MethodName: "TenantList",
			Handler:    _TenantService_TenantList_Handler,
		},
		{
			MethodName: "TenantListTotal",
			Handler:    _TenantService_TenantListTotal_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "tenant.proto",
}
