// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v6.33.0
// source: tenant_package.proto

// tenant_package 租户套餐

package tenant

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	TenantPackageService_TenantPackageCreate_FullMethodName    = "/tenant.TenantPackageService/TenantPackageCreate"
	TenantPackageService_TenantPackageUpdate_FullMethodName    = "/tenant.TenantPackageService/TenantPackageUpdate"
	TenantPackageService_TenantPackageDelete_FullMethodName    = "/tenant.TenantPackageService/TenantPackageDelete"
	TenantPackageService_TenantPackage_FullMethodName          = "/tenant.TenantPackageService/TenantPackage"
	TenantPackageService_TenantPackageList_FullMethodName      = "/tenant.TenantPackageService/TenantPackageList"
	TenantPackageService_TenantPackageListTotal_FullMethodName = "/tenant.TenantPackageService/TenantPackageListTotal"
)

// TenantPackageServiceClient is the client API for TenantPackageService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// TenantPackageService 服务
type TenantPackageServiceClient interface {
	TenantPackageCreate(ctx context.Context, in *TenantPackageCreateRequest, opts ...grpc.CallOption) (*TenantPackageCreateResponse, error)
	TenantPackageUpdate(ctx context.Context, in *TenantPackageUpdateRequest, opts ...grpc.CallOption) (*TenantPackageUpdateResponse, error)
	TenantPackageDelete(ctx context.Context, in *TenantPackageDeleteRequest, opts ...grpc.CallOption) (*TenantPackageDeleteResponse, error)
	TenantPackage(ctx context.Context, in *TenantPackageRequest, opts ...grpc.CallOption) (*TenantPackageResponse, error)
	TenantPackageList(ctx context.Context, in *TenantPackageListRequest, opts ...grpc.CallOption) (*TenantPackageListResponse, error)
	TenantPackageListTotal(ctx context.Context, in *TenantPackageListTotalRequest, opts ...grpc.CallOption) (*TenantPackageTotalResponse, error)
}

type tenantPackageServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewTenantPackageServiceClient(cc grpc.ClientConnInterface) TenantPackageServiceClient {
	return &tenantPackageServiceClient{cc}
}

func (c *tenantPackageServiceClient) TenantPackageCreate(ctx context.Context, in *TenantPackageCreateRequest, opts ...grpc.CallOption) (*TenantPackageCreateResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(TenantPackageCreateResponse)
	err := c.cc.Invoke(ctx, TenantPackageService_TenantPackageCreate_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tenantPackageServiceClient) TenantPackageUpdate(ctx context.Context, in *TenantPackageUpdateRequest, opts ...grpc.CallOption) (*TenantPackageUpdateResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(TenantPackageUpdateResponse)
	err := c.cc.Invoke(ctx, TenantPackageService_TenantPackageUpdate_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tenantPackageServiceClient) TenantPackageDelete(ctx context.Context, in *TenantPackageDeleteRequest, opts ...grpc.CallOption) (*TenantPackageDeleteResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(TenantPackageDeleteResponse)
	err := c.cc.Invoke(ctx, TenantPackageService_TenantPackageDelete_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tenantPackageServiceClient) TenantPackage(ctx context.Context, in *TenantPackageRequest, opts ...grpc.CallOption) (*TenantPackageResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(TenantPackageResponse)
	err := c.cc.Invoke(ctx, TenantPackageService_TenantPackage_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tenantPackageServiceClient) TenantPackageList(ctx context.Context, in *TenantPackageListRequest, opts ...grpc.CallOption) (*TenantPackageListResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(TenantPackageListResponse)
	err := c.cc.Invoke(ctx, TenantPackageService_TenantPackageList_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tenantPackageServiceClient) TenantPackageListTotal(ctx context.Context, in *TenantPackageListTotalRequest, opts ...grpc.CallOption) (*TenantPackageTotalResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(TenantPackageTotalResponse)
	err := c.cc.Invoke(ctx, TenantPackageService_TenantPackageListTotal_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TenantPackageServiceServer is the server API for TenantPackageService service.
// All implementations must embed UnimplementedTenantPackageServiceServer
// for forward compatibility.
//
// TenantPackageService 服务
type TenantPackageServiceServer interface {
	TenantPackageCreate(context.Context, *TenantPackageCreateRequest) (*TenantPackageCreateResponse, error)
	TenantPackageUpdate(context.Context, *TenantPackageUpdateRequest) (*TenantPackageUpdateResponse, error)
	TenantPackageDelete(context.Context, *TenantPackageDeleteRequest) (*TenantPackageDeleteResponse, error)
	TenantPackage(context.Context, *TenantPackageRequest) (*TenantPackageResponse, error)
	TenantPackageList(context.Context, *TenantPackageListRequest) (*TenantPackageListResponse, error)
	TenantPackageListTotal(context.Context, *TenantPackageListTotalRequest) (*TenantPackageTotalResponse, error)
	mustEmbedUnimplementedTenantPackageServiceServer()
}

// UnimplementedTenantPackageServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedTenantPackageServiceServer struct{}

func (UnimplementedTenantPackageServiceServer) TenantPackageCreate(context.Context, *TenantPackageCreateRequest) (*TenantPackageCreateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TenantPackageCreate not implemented")
}
func (UnimplementedTenantPackageServiceServer) TenantPackageUpdate(context.Context, *TenantPackageUpdateRequest) (*TenantPackageUpdateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TenantPackageUpdate not implemented")
}
func (UnimplementedTenantPackageServiceServer) TenantPackageDelete(context.Context, *TenantPackageDeleteRequest) (*TenantPackageDeleteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TenantPackageDelete not implemented")
}
func (UnimplementedTenantPackageServiceServer) TenantPackage(context.Context, *TenantPackageRequest) (*TenantPackageResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TenantPackage not implemented")
}
func (UnimplementedTenantPackageServiceServer) TenantPackageList(context.Context, *TenantPackageListRequest) (*TenantPackageListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TenantPackageList not implemented")
}
func (UnimplementedTenantPackageServiceServer) TenantPackageListTotal(context.Context, *TenantPackageListTotalRequest) (*TenantPackageTotalResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TenantPackageListTotal not implemented")
}
func (UnimplementedTenantPackageServiceServer) mustEmbedUnimplementedTenantPackageServiceServer() {}
func (UnimplementedTenantPackageServiceServer) testEmbeddedByValue()                              {}

// UnsafeTenantPackageServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to TenantPackageServiceServer will
// result in compilation errors.
type UnsafeTenantPackageServiceServer interface {
	mustEmbedUnimplementedTenantPackageServiceServer()
}

func RegisterTenantPackageServiceServer(s grpc.ServiceRegistrar, srv TenantPackageServiceServer) {
	// If the following call pancis, it indicates UnimplementedTenantPackageServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&TenantPackageService_ServiceDesc, srv)
}

func _TenantPackageService_TenantPackageCreate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TenantPackageCreateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TenantPackageServiceServer).TenantPackageCreate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TenantPackageService_TenantPackageCreate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TenantPackageServiceServer).TenantPackageCreate(ctx, req.(*TenantPackageCreateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TenantPackageService_TenantPackageUpdate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TenantPackageUpdateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TenantPackageServiceServer).TenantPackageUpdate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TenantPackageService_TenantPackageUpdate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TenantPackageServiceServer).TenantPackageUpdate(ctx, req.(*TenantPackageUpdateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TenantPackageService_TenantPackageDelete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TenantPackageDeleteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TenantPackageServiceServer).TenantPackageDelete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TenantPackageService_TenantPackageDelete_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TenantPackageServiceServer).TenantPackageDelete(ctx, req.(*TenantPackageDeleteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TenantPackageService_TenantPackage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TenantPackageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TenantPackageServiceServer).TenantPackage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TenantPackageService_TenantPackage_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TenantPackageServiceServer).TenantPackage(ctx, req.(*TenantPackageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TenantPackageService_TenantPackageList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TenantPackageListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TenantPackageServiceServer).TenantPackageList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TenantPackageService_TenantPackageList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TenantPackageServiceServer).TenantPackageList(ctx, req.(*TenantPackageListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TenantPackageService_TenantPackageListTotal_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TenantPackageListTotalRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TenantPackageServiceServer).TenantPackageListTotal(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TenantPackageService_TenantPackageListTotal_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TenantPackageServiceServer).TenantPackageListTotal(ctx, req.(*TenantPackageListTotalRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// TenantPackageService_ServiceDesc is the grpc.ServiceDesc for TenantPackageService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var TenantPackageService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "tenant.TenantPackageService",
	HandlerType: (*TenantPackageServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "TenantPackageCreate",
			Handler:    _TenantPackageService_TenantPackageCreate_Handler,
		},
		{
			MethodName: "TenantPackageUpdate",
			Handler:    _TenantPackageService_TenantPackageUpdate_Handler,
		},
		{
			MethodName: "TenantPackageDelete",
			Handler:    _TenantPackageService_TenantPackageDelete_Handler,
		},
		{
			MethodName: "TenantPackage",
			Handler:    _TenantPackageService_TenantPackage_Handler,
		},
		{
			MethodName: "TenantPackageList",
			Handler:    _TenantPackageService_TenantPackageList_Handler,
		},
		{
			MethodName: "TenantPackageListTotal",
			Handler:    _TenantPackageService_TenantPackageListTotal_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "tenant_package.proto",
}
