// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v6.33.0
// source: dict.proto

// dict 字典

package dict

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	DictService_DictCreate_FullMethodName    = "/dict.DictService/DictCreate"
	DictService_DictUpdate_FullMethodName    = "/dict.DictService/DictUpdate"
	DictService_DictDelete_FullMethodName    = "/dict.DictService/DictDelete"
	DictService_Dict_FullMethodName          = "/dict.DictService/Dict"
	DictService_DictList_FullMethodName      = "/dict.DictService/DictList"
	DictService_DictListTotal_FullMethodName = "/dict.DictService/DictListTotal"
)

// DictServiceClient is the client API for DictService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// DictService 服务
type DictServiceClient interface {
	DictCreate(ctx context.Context, in *DictCreateRequest, opts ...grpc.CallOption) (*DictCreateResponse, error)
	DictUpdate(ctx context.Context, in *DictUpdateRequest, opts ...grpc.CallOption) (*DictUpdateResponse, error)
	DictDelete(ctx context.Context, in *DictDeleteRequest, opts ...grpc.CallOption) (*DictDeleteResponse, error)
	Dict(ctx context.Context, in *DictRequest, opts ...grpc.CallOption) (*DictResponse, error)
	DictList(ctx context.Context, in *DictListRequest, opts ...grpc.CallOption) (*DictListResponse, error)
	DictListTotal(ctx context.Context, in *DictListTotalRequest, opts ...grpc.CallOption) (*DictTotalResponse, error)
}

type dictServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewDictServiceClient(cc grpc.ClientConnInterface) DictServiceClient {
	return &dictServiceClient{cc}
}

func (c *dictServiceClient) DictCreate(ctx context.Context, in *DictCreateRequest, opts ...grpc.CallOption) (*DictCreateResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DictCreateResponse)
	err := c.cc.Invoke(ctx, DictService_DictCreate_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dictServiceClient) DictUpdate(ctx context.Context, in *DictUpdateRequest, opts ...grpc.CallOption) (*DictUpdateResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DictUpdateResponse)
	err := c.cc.Invoke(ctx, DictService_DictUpdate_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dictServiceClient) DictDelete(ctx context.Context, in *DictDeleteRequest, opts ...grpc.CallOption) (*DictDeleteResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DictDeleteResponse)
	err := c.cc.Invoke(ctx, DictService_DictDelete_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dictServiceClient) Dict(ctx context.Context, in *DictRequest, opts ...grpc.CallOption) (*DictResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DictResponse)
	err := c.cc.Invoke(ctx, DictService_Dict_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dictServiceClient) DictList(ctx context.Context, in *DictListRequest, opts ...grpc.CallOption) (*DictListResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DictListResponse)
	err := c.cc.Invoke(ctx, DictService_DictList_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dictServiceClient) DictListTotal(ctx context.Context, in *DictListTotalRequest, opts ...grpc.CallOption) (*DictTotalResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DictTotalResponse)
	err := c.cc.Invoke(ctx, DictService_DictListTotal_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DictServiceServer is the server API for DictService service.
// All implementations must embed UnimplementedDictServiceServer
// for forward compatibility.
//
// DictService 服务
type DictServiceServer interface {
	DictCreate(context.Context, *DictCreateRequest) (*DictCreateResponse, error)
	DictUpdate(context.Context, *DictUpdateRequest) (*DictUpdateResponse, error)
	DictDelete(context.Context, *DictDeleteRequest) (*DictDeleteResponse, error)
	Dict(context.Context, *DictRequest) (*DictResponse, error)
	DictList(context.Context, *DictListRequest) (*DictListResponse, error)
	DictListTotal(context.Context, *DictListTotalRequest) (*DictTotalResponse, error)
	mustEmbedUnimplementedDictServiceServer()
}

// UnimplementedDictServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedDictServiceServer struct{}

func (UnimplementedDictServiceServer) DictCreate(context.Context, *DictCreateRequest) (*DictCreateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DictCreate not implemented")
}
func (UnimplementedDictServiceServer) DictUpdate(context.Context, *DictUpdateRequest) (*DictUpdateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DictUpdate not implemented")
}
func (UnimplementedDictServiceServer) DictDelete(context.Context, *DictDeleteRequest) (*DictDeleteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DictDelete not implemented")
}
func (UnimplementedDictServiceServer) Dict(context.Context, *DictRequest) (*DictResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Dict not implemented")
}
func (UnimplementedDictServiceServer) DictList(context.Context, *DictListRequest) (*DictListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DictList not implemented")
}
func (UnimplementedDictServiceServer) DictListTotal(context.Context, *DictListTotalRequest) (*DictTotalResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DictListTotal not implemented")
}
func (UnimplementedDictServiceServer) mustEmbedUnimplementedDictServiceServer() {}
func (UnimplementedDictServiceServer) testEmbeddedByValue()                     {}

// UnsafeDictServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to DictServiceServer will
// result in compilation errors.
type UnsafeDictServiceServer interface {
	mustEmbedUnimplementedDictServiceServer()
}

func RegisterDictServiceServer(s grpc.ServiceRegistrar, srv DictServiceServer) {
	// If the following call pancis, it indicates UnimplementedDictServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&DictService_ServiceDesc, srv)
}

func _DictService_DictCreate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DictCreateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DictServiceServer).DictCreate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DictService_DictCreate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DictServiceServer).DictCreate(ctx, req.(*DictCreateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DictService_DictUpdate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DictUpdateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DictServiceServer).DictUpdate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DictService_DictUpdate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DictServiceServer).DictUpdate(ctx, req.(*DictUpdateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DictService_DictDelete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DictDeleteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DictServiceServer).DictDelete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DictService_DictDelete_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DictServiceServer).DictDelete(ctx, req.(*DictDeleteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DictService_Dict_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DictRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DictServiceServer).Dict(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DictService_Dict_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DictServiceServer).Dict(ctx, req.(*DictRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DictService_DictList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DictListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DictServiceServer).DictList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DictService_DictList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DictServiceServer).DictList(ctx, req.(*DictListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DictService_DictListTotal_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DictListTotalRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DictServiceServer).DictListTotal(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DictService_DictListTotal_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DictServiceServer).DictListTotal(ctx, req.(*DictListTotalRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// DictService_ServiceDesc is the grpc.ServiceDesc for DictService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var DictService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "dict.DictService",
	HandlerType: (*DictServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "DictCreate",
			Handler:    _DictService_DictCreate_Handler,
		},
		{
			MethodName: "DictUpdate",
			Handler:    _DictService_DictUpdate_Handler,
		},
		{
			MethodName: "DictDelete",
			Handler:    _DictService_DictDelete_Handler,
		},
		{
			MethodName: "Dict",
			Handler:    _DictService_Dict_Handler,
		},
		{
			MethodName: "DictList",
			Handler:    _DictService_DictList_Handler,
		},
		{
			MethodName: "DictListTotal",
			Handler:    _DictService_DictListTotal_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "dict.proto",
}
