// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v6.32.1
// source: dict_type.proto

// dict_type 字典类型

package dict

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	DictTypeService_DictTypeCreate_FullMethodName    = "/dict.DictTypeService/DictTypeCreate"
	DictTypeService_DictTypeUpdate_FullMethodName    = "/dict.DictTypeService/DictTypeUpdate"
	DictTypeService_DictTypeDelete_FullMethodName    = "/dict.DictTypeService/DictTypeDelete"
	DictTypeService_DictType_FullMethodName          = "/dict.DictTypeService/DictType"
	DictTypeService_DictTypeType_FullMethodName      = "/dict.DictTypeService/DictTypeType"
	DictTypeService_DictTypeList_FullMethodName      = "/dict.DictTypeService/DictTypeList"
	DictTypeService_DictTypeListTotal_FullMethodName = "/dict.DictTypeService/DictTypeListTotal"
)

// DictTypeServiceClient is the client API for DictTypeService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// DictTypeService 服务
type DictTypeServiceClient interface {
	DictTypeCreate(ctx context.Context, in *DictTypeCreateRequest, opts ...grpc.CallOption) (*DictTypeCreateResponse, error)
	DictTypeUpdate(ctx context.Context, in *DictTypeUpdateRequest, opts ...grpc.CallOption) (*DictTypeUpdateResponse, error)
	DictTypeDelete(ctx context.Context, in *DictTypeDeleteRequest, opts ...grpc.CallOption) (*DictTypeDeleteResponse, error)
	DictType(ctx context.Context, in *DictTypeRequest, opts ...grpc.CallOption) (*DictTypeResponse, error)
	DictTypeType(ctx context.Context, in *DictTypeTypeRequest, opts ...grpc.CallOption) (*DictTypeTypeResponse, error)
	DictTypeList(ctx context.Context, in *DictTypeListRequest, opts ...grpc.CallOption) (*DictTypeListResponse, error)
	DictTypeListTotal(ctx context.Context, in *DictTypeListTotalRequest, opts ...grpc.CallOption) (*DictTypeTotalResponse, error)
}

type dictTypeServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewDictTypeServiceClient(cc grpc.ClientConnInterface) DictTypeServiceClient {
	return &dictTypeServiceClient{cc}
}

func (c *dictTypeServiceClient) DictTypeCreate(ctx context.Context, in *DictTypeCreateRequest, opts ...grpc.CallOption) (*DictTypeCreateResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DictTypeCreateResponse)
	err := c.cc.Invoke(ctx, DictTypeService_DictTypeCreate_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dictTypeServiceClient) DictTypeUpdate(ctx context.Context, in *DictTypeUpdateRequest, opts ...grpc.CallOption) (*DictTypeUpdateResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DictTypeUpdateResponse)
	err := c.cc.Invoke(ctx, DictTypeService_DictTypeUpdate_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dictTypeServiceClient) DictTypeDelete(ctx context.Context, in *DictTypeDeleteRequest, opts ...grpc.CallOption) (*DictTypeDeleteResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DictTypeDeleteResponse)
	err := c.cc.Invoke(ctx, DictTypeService_DictTypeDelete_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dictTypeServiceClient) DictType(ctx context.Context, in *DictTypeRequest, opts ...grpc.CallOption) (*DictTypeResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DictTypeResponse)
	err := c.cc.Invoke(ctx, DictTypeService_DictType_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dictTypeServiceClient) DictTypeType(ctx context.Context, in *DictTypeTypeRequest, opts ...grpc.CallOption) (*DictTypeTypeResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DictTypeTypeResponse)
	err := c.cc.Invoke(ctx, DictTypeService_DictTypeType_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dictTypeServiceClient) DictTypeList(ctx context.Context, in *DictTypeListRequest, opts ...grpc.CallOption) (*DictTypeListResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DictTypeListResponse)
	err := c.cc.Invoke(ctx, DictTypeService_DictTypeList_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dictTypeServiceClient) DictTypeListTotal(ctx context.Context, in *DictTypeListTotalRequest, opts ...grpc.CallOption) (*DictTypeTotalResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DictTypeTotalResponse)
	err := c.cc.Invoke(ctx, DictTypeService_DictTypeListTotal_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DictTypeServiceServer is the server API for DictTypeService service.
// All implementations must embed UnimplementedDictTypeServiceServer
// for forward compatibility.
//
// DictTypeService 服务
type DictTypeServiceServer interface {
	DictTypeCreate(context.Context, *DictTypeCreateRequest) (*DictTypeCreateResponse, error)
	DictTypeUpdate(context.Context, *DictTypeUpdateRequest) (*DictTypeUpdateResponse, error)
	DictTypeDelete(context.Context, *DictTypeDeleteRequest) (*DictTypeDeleteResponse, error)
	DictType(context.Context, *DictTypeRequest) (*DictTypeResponse, error)
	DictTypeType(context.Context, *DictTypeTypeRequest) (*DictTypeTypeResponse, error)
	DictTypeList(context.Context, *DictTypeListRequest) (*DictTypeListResponse, error)
	DictTypeListTotal(context.Context, *DictTypeListTotalRequest) (*DictTypeTotalResponse, error)
	mustEmbedUnimplementedDictTypeServiceServer()
}

// UnimplementedDictTypeServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedDictTypeServiceServer struct{}

func (UnimplementedDictTypeServiceServer) DictTypeCreate(context.Context, *DictTypeCreateRequest) (*DictTypeCreateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DictTypeCreate not implemented")
}
func (UnimplementedDictTypeServiceServer) DictTypeUpdate(context.Context, *DictTypeUpdateRequest) (*DictTypeUpdateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DictTypeUpdate not implemented")
}
func (UnimplementedDictTypeServiceServer) DictTypeDelete(context.Context, *DictTypeDeleteRequest) (*DictTypeDeleteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DictTypeDelete not implemented")
}
func (UnimplementedDictTypeServiceServer) DictType(context.Context, *DictTypeRequest) (*DictTypeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DictType not implemented")
}
func (UnimplementedDictTypeServiceServer) DictTypeType(context.Context, *DictTypeTypeRequest) (*DictTypeTypeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DictTypeType not implemented")
}
func (UnimplementedDictTypeServiceServer) DictTypeList(context.Context, *DictTypeListRequest) (*DictTypeListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DictTypeList not implemented")
}
func (UnimplementedDictTypeServiceServer) DictTypeListTotal(context.Context, *DictTypeListTotalRequest) (*DictTypeTotalResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DictTypeListTotal not implemented")
}
func (UnimplementedDictTypeServiceServer) mustEmbedUnimplementedDictTypeServiceServer() {}
func (UnimplementedDictTypeServiceServer) testEmbeddedByValue()                         {}

// UnsafeDictTypeServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to DictTypeServiceServer will
// result in compilation errors.
type UnsafeDictTypeServiceServer interface {
	mustEmbedUnimplementedDictTypeServiceServer()
}

func RegisterDictTypeServiceServer(s grpc.ServiceRegistrar, srv DictTypeServiceServer) {
	// If the following call pancis, it indicates UnimplementedDictTypeServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&DictTypeService_ServiceDesc, srv)
}

func _DictTypeService_DictTypeCreate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DictTypeCreateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DictTypeServiceServer).DictTypeCreate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DictTypeService_DictTypeCreate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DictTypeServiceServer).DictTypeCreate(ctx, req.(*DictTypeCreateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DictTypeService_DictTypeUpdate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DictTypeUpdateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DictTypeServiceServer).DictTypeUpdate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DictTypeService_DictTypeUpdate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DictTypeServiceServer).DictTypeUpdate(ctx, req.(*DictTypeUpdateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DictTypeService_DictTypeDelete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DictTypeDeleteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DictTypeServiceServer).DictTypeDelete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DictTypeService_DictTypeDelete_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DictTypeServiceServer).DictTypeDelete(ctx, req.(*DictTypeDeleteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DictTypeService_DictType_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DictTypeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DictTypeServiceServer).DictType(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DictTypeService_DictType_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DictTypeServiceServer).DictType(ctx, req.(*DictTypeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DictTypeService_DictTypeType_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DictTypeTypeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DictTypeServiceServer).DictTypeType(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DictTypeService_DictTypeType_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DictTypeServiceServer).DictTypeType(ctx, req.(*DictTypeTypeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DictTypeService_DictTypeList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DictTypeListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DictTypeServiceServer).DictTypeList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DictTypeService_DictTypeList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DictTypeServiceServer).DictTypeList(ctx, req.(*DictTypeListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DictTypeService_DictTypeListTotal_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DictTypeListTotalRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DictTypeServiceServer).DictTypeListTotal(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DictTypeService_DictTypeListTotal_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DictTypeServiceServer).DictTypeListTotal(ctx, req.(*DictTypeListTotalRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// DictTypeService_ServiceDesc is the grpc.ServiceDesc for DictTypeService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var DictTypeService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "dict.DictTypeService",
	HandlerType: (*DictTypeServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "DictTypeCreate",
			Handler:    _DictTypeService_DictTypeCreate_Handler,
		},
		{
			MethodName: "DictTypeUpdate",
			Handler:    _DictTypeService_DictTypeUpdate_Handler,
		},
		{
			MethodName: "DictTypeDelete",
			Handler:    _DictTypeService_DictTypeDelete_Handler,
		},
		{
			MethodName: "DictType",
			Handler:    _DictTypeService_DictType_Handler,
		},
		{
			MethodName: "DictTypeType",
			Handler:    _DictTypeService_DictTypeType_Handler,
		},
		{
			MethodName: "DictTypeList",
			Handler:    _DictTypeService_DictTypeList_Handler,
		},
		{
			MethodName: "DictTypeListTotal",
			Handler:    _DictTypeService_DictTypeListTotal_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "dict_type.proto",
}
